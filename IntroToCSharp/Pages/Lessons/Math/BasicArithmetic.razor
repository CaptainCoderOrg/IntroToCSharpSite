@inherits CaptainCoder.Page
@page "/lessons/variables/basic-arithmetic"

<Title>Basic Arithmetic</Title>

<Section Title="Introduction">
    <Adventure Portrait="Portraits.CaptainCoder">
        <Item>
            <AdventureDialog>
                <Text>
                    Did you know that the word "computer" once meant "one who
                    computes"? Before electronic computers were available, a
                    person who was good at performing mathematical calculations
                    might have been employed as a "computer".
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog>
                <Text>
                    In this lesson, you how to write <b>expressions</b>
                    using <b>binary arithmetic operators</b> and
                    understand how the computer <b>evaluates</b> them.
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Page="BasicDataTypes.PageRef">
                <Text>
                    Before starting this activity, you should be familiar with
                    the <b>int</b> and <b>double</b> data types. If you have not
                    done so already, you should complete the
                    <b>@BasicDataTypes.PageRef.Name</b> lesson.
                </Text>
            </AdventureDialog>
        </Item>
    </Adventure>
</Section>
<Section Title="Addition, Subtraction, Multiplication, and Division">
    <Text>
        The <b>expression</b> below is an made up
        of 4 <b>binary arithmetic operators</b> and 5 <b>integers</b>.
    </Text>
    <CodeBlock>5 + 8 * (10 - 8) / 4;</CodeBlock>
    <Text>
        A <b>binary arithmetic operator</b> performs arithmetic on two numbers.
        The <b>expression</b> above, uses the <b>addition operator</b>
        (<Code>+</Code>), <b>subtraction operator</b> (<Code>-</Code>), <b>multiplication
        operator</b> (<Code>*</Code>), and <b>division operator</b>
        (<Code>/</Code>). For the most part, these <b>arithmetic operators</b>
        behave the way you would expect in traditional mathematics and follow
        typical arithmetic rules for <b>evaluation</b>.
    </Text>
    <HorizontalDivider/>
    <IntroToCSharp.Pages.Lessons.Variables.Examples.ArithmeticOperationExampleStepper/>
    <HorizontalDivider/>
</Section>

<Section Title="Integer Division vs. Floating-Point Division">
    <Explore Title="Integer Division">
        <Text>Study the code below but don't run it yet.</Text>
        <CodeBlock>
int x = 5;
int y = 2;
int result = x / y;
Console.WriteLine(result);
        </CodeBlock>
        <Question Text="What do you think the program will display?"/>
        <TaskItem Name="Test Integer Division">Add the code to a C# program and run it.</TaskItem>
        <Question Text="What did the program display?"/>
        <Explanation>
            <Text>
                Recall that an <b>int</b> is a whole number. In mathematics, 5 รท
                2 is 2.5. However, when you perform division on <b>int
                values</b> the computer performs <b>integer division</b>. During
                <b>evaluation</b> of <b>integer division</b> the computer drops
                the decimals from the result.
            </Text>
            <Note>
                <b>Integer division</b> does not round the result, it drops
                everything after the decimal point. For example, using
                <b>integer division</b> <Code>9 / 10</Code> <b>evaluates</b> to
                <Code>0</Code>.
            </Note>
        </Explanation>
    </Explore>
    <Explore Title="Floating-Point Division">
        <Text>Study the code below but don't run it yet.</Text>
        <CodeBlock>
double x = 5;
double y = 2;
double result = x / y;
Console.WriteLine(result);
        </CodeBlock>
        <Question Text="What do you think the program above will display?"/>
        <TaskItem Name="Test Double Division">Add the code to a C# program and run it.</TaskItem>
        <Question Text="What did the program above display?"/>
        <Explanation>
            <Text>
                Unlike <b>int</b>, the <b>double</b> data type is capable of
                representing the <b>value</b> <Code>2.5</Code>. This type of
                number is called a <b>floating-point number</b>.
            </Text>
        </Explanation>
    </Explore>
</Section>
<Section Title="Division by Zero">
    <Explore Title="Division by Zero with Integers">
        <Text>
            In mathematics, division by <Code>0</Code> is not defined. So, what
            happens when you divide by <Code>0</Code> in a C# program?
        </Text>
        <Text>Study the code below but don't run it yet.</Text>
        <CodeBlock>
int x = 5 / 0;
Console.WriteLine(x);
        </CodeBlock>
        <Question Text="What do you think the code will display?"/>
        <TaskItem Name="Test literal division by 0">Add the code above to a program and run it.</TaskItem>
        <Question Text="What was the result?"/>
        <Explanation>
            <Text>
                If all went well, the above complier produced the error message,
                "<b>Division by constant zero</b>" and didn't allow you to run the
                program. When you explicitly write division by zero, the C# compiler
                is smart enough to stop you.
            </Text>
        </Explanation>
        <Text>Study the code below but don't run it yet.</Text>
        <CodeBlock>
int a = 0;
int x = 5 / a;
Console.WriteLine(x);
        </CodeBlock>
        <Question Text="What do you think the code above will display?"/>
        <TaskItem Name="Test division by 0 variable">Add the code above to a program and run it.</TaskItem>
        <Question Text="What was the result of running the code above?"/>
        <Explanation>
            <Text>
                Unlike the previous section of code, the compiler doesn't know
                that the <b>variable</b> <Code>a</Code> is storing the
                <b>value</b> <Code>0</Code>. The program above compiles and
                runs. However, during execution, the program crashes and a
                <b>run time error</b> occurs: "<b>Error:
                System.DivideByZeroException: Attempted to divide by zero.</b>"
            </Text>
        </Explanation>
    </Explore>
    <Explore Title="Division by Zero with Doubles">
        <Text>Study the code below but don't run it yet.</Text>
        <CodeBlock>
double x = 5.0 / 0.0;
Console.WriteLine(x);
        </CodeBlock>
        <Question Text="What do you think the will be display?"/>
        <TaskItem Name="Test double division by 0">Add the code above to a program and run it.</TaskItem>
        <Question Text="What was displayed?"/>
        <Explanation>
            <Text>If all went well, the program displayed the symbol for infinity.</Text>
            <Text>
                When you divide by zero with a <b>floating-point</b> number, the
                program does not crash. Instead, the division results in the
                value <Code>double.PositiveInfinity</Code> or
                <Code>double.NegativeInfinity</Code>. This behaviour might seem
                odd but it is a result of the computer attempting to divide by
                an infinitely small number.
            </Text>
        </Explanation>
    </Explore>
</Section>
<Section Title="What's Next?">
    <Adventure Portrait="Portraits.CaptainCoder">
        <Item>
            <AdventureDialog>
                With everything you're learning, you will be a computational wizard in no time!
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Page="ConvertingTypes.PageRef">
                    Now that you know how to use the <b>arithmetic operators</b>, you will
                    want to be able to read numeric <b>values</b> from the user.
                    If you have not done so yet, now might be a
                    good time to complete the <b>@ConvertingTypes.PageRef.Name</b> lesson.
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Page="ShapeAnalyzer.PageRef">
                If you're already comfortable with type conversions, you
                might be ready to take on the first <b>Gauntlet: @ShapeAnalyzer.PageRef.Name</b>.
                This <b>Gauntlet</b> is comprised of 4 challenges to test your
                programming prowess.
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Page="MathClass.PageRef">
                You might also be interested in learning about the
                <b>methods</b> provided by C# for performing useful mathematical
                operations in the <b>@MathClass.PageRef.Name</b> lesson.
            </AdventureDialog>
        </Item>
        <Item>
            <MarkFinishedDialog Page="BasicArithmetic.PageRef"/>
        </Item>
    </Adventure>
</Section>

@code {
    public static readonly PageRef PageRef = new PageRef("Basic Arithmetic", "/lessons/variables/basic-arithmetic", 3, "Math");
}