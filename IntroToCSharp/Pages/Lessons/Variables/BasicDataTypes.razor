@inherits CaptainCoder.Page
@page "/lessons/variables/basic-data-types"

<Title>Basic Data Types</Title>
<Section Title="Introduction">
    <MudText>
    In <MudLink Href="@Variables.Href">The Basics</MudLink> we discussed how to
    use <Keyword Word="variable"/>s to store, read, and update data in a
    computer's memory. You learned that when you declare a <b>variable</b>
    you must specify the type of data that will be stored. This is called a
    <Keyword Word="data type"/>. In this section, we will examine the 4
    most commonly used <b>data types</b> in C#:
    </MudText>
    <MudList Clickable="true">
        <MudListItem Icon="@Icons.Filled.Circle">String</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Integer</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Double</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Boolean</MudListItem>
    </MudList>
</Section>

<Section Title="String">
    <MudText>
        A <Code>string</Code> is used to store text. To create a
        <Code>string</Code> literal, place the desired text between double
        quotes. For example:
    </MudText>
    <CodeBlock AllowCopy>
string name = "Thor Odinson";
string title = "God of Thunder";
    </CodeBlock>
    <MudText>
        You can combine <Code>string</Code>s together using the concatenate operator: (<Code>+</Code>).
    </MudText>
    <CodeBlock AllowCopy ReplIt="JosephCollard/HelloWorldConcat">
string message = "Hello" + ", world!";
Console.WriteLine(message);
    </CodeBlock>
    <MudText>
        You can use the concatenate operator multiple times in a single expression:
    </MudText>
    <CodeBlock AllowCopy ReplIt="JosephCollard/MultipleConcats">
string firstName = "Captain"
string lastName = "Coder"
Console.WriteLine("Look it is " + firstName + " " + lastName + "!");
    </CodeBlock>
    <Challenge Title="Thor's Title">
        <MudText>There is a bug in the code below:</MudText>
        <CodeBlock AllowCopy ReplIt="JosephCollard/ThorConcatenate">Console.WriteLine(name + "the" + title);</CodeBlock>
        <Question Text="What went wrong?" Spoiler="The spacing is off in the output."/>
        <MudText>
            Fix the code above so that it displays correctly: <Code>"Thor Odinson the God of Thunder"</Code>.
        </MudText>
        <Question Text="Answer Here" Spoiler="@("Console.WriteLine(name + \" the \" + title);")" />
    </Challenge>
</Section>

<Section Title="Integers">
    <MudText>
        An <b>integer</b> is a whole number (no decimals allowed).
        In C#, we declare <b>integers</b> using the <Code>int</Code> data type. 
        For example:
    </MudText>
    <CodeBlock AllowCopy>
int power = 9001;
int price = 42;
int y = -17;
    </CodeBlock>
    <MudText>
        Notice, in the above example, we did not use a comma to seperate the
        digits in the <Code>int</Code> literal <Code>9001</Code>.
        It can become difficult to read <Code>int</Code>s that become increasingly long. 
        To help with this, C# allows you to use underscores (<Code>_</Code>)
        within an <Code>int</Code> literal. For example:
    </MudText>
    <CodeBlock AllowCopy>int population = 329_500_000;</CodeBlock>
    <Note>
        The underscores may be place anywhere in the number so you still need to
        take care that you have the correct number of digits.
    </Note>
    <MudText>
        If you try to create an integer that has a decimal value, the compiler will complain.
    </MudText>
    <CodeBlock AllowCopy>int gravity = 9.8;</CodeBlock>
    <Question Text="What is the error message that occurs when you run the code example above?" />
    <Challenge Title="Invalid Int Values">
        <MudText>
            The <Code>int</Code> data type is represented using 4 <Keyword
            Word="byte"/>s (32 bits) of memory. This means there are
            2<sup>32</sup> distinct values that can be encoded as an
            <Code>int</Code>. The smallest value is -2,147,483,648 and the
            largest value is 2,147,483,647.
        </MudText>
        <MudText>
            Write a program that does the following:
        </MudText>
        <TaskList Name="Invalid Int Challenge">
            <TaskItem Name="Step1">Attempts to declare an <Code>int</Code> that is less than the smallest value.</TaskItem>
            <TaskItem Name="Step2">Attempts to declare an <Code>int</Code> that is greater than the largest value.</TaskItem>
        </TaskList>
        <Question Text="What happens when you try to run the program?"/>
    </Challenge>
</Section>

<Section Title="Double">
    <MudText>
        Just like an <Code>int</Code>, a <Code>double</Code> stores numbers;
        however a <Code>double</Code> stores decimal numbers. For example:
    </MudText>
    <CodeBlock AllowCopy>
double gravity = 9.81;
double pi = 3.14159;
double ice = 32;
    </CodeBlock>
    <MudText>
        A <Code>double</Code> uses 8 <Keyword Word="byte"/>s of memory and is
        capable of approximating incredibly large and incredibly small values.
        The smallest value is approximately ±10<sup>-324</sup> and the largest
        value is approximately ±10<sup>308</sup>. To achieve this incredible 
        range of values using only 64 <Keyword Word="bit"/>s of memory we must
        sacrifice a small amount of precision. That is, <Code>double</Code> values
        are only approximations.
    </MudText>
    <Challenge Title="Approximating Numbers">
        <MudText>Don't run the code below just yet. Read it and answer the question.</MudText>
        <CodeBlock AllowCopy ReplIt="JosephCollard/DoublePrecision">
double error = 2.0 - 1.9;
Console.WriteLine(error);
        </CodeBlock>
        <Question Text="What do you think the code below will display?"/>
        <MudText>
            <b>What happened?</b> <br/>
            The code above demonstrates a <Keyword Word="rounding error"/>. This is
            an error that occurs when a decimal value cannot be precisely represented.
        </MudText>
    </Challenge>
    <MudText>
        Because <Code>double</Code>s have such a massive range of values, you
        may find that you need to create a <Code>double</Code> literal that is
        incredibly long. For example, the "Avogadro Constant" is
        602,200,000,000,000,000,000,000. This number is typically represented
        using scientific notation as: 6.022x10<sup>23</sup>. For convenience, C#
        allows you to use scientific notation to specify a <Code>double</Code>
        literal.
    </MudText>
    <CodeBlock AllowCopy>double avogadrosConstant = 6.022e23;</CodeBlock>
    <Note>
        In the example above the <Code>e</Code> is short for "exponent".
    </Note>
</Section>

<Section Title="Boolean">
    <MudText>
        Booleans are a data type which can either be <Code>true</Code> or 
        <Code>false</Code>. In C#, we declare <b>booleans</b> using the
        <Code>bool</Code> data type. For example:
    </MudText>
    <CodeBlock>
bool hasSword = true;
bool isGameOver = false;
    </CodeBlock>
    <FunFact>
        The word "boolean" is named after the mathematician George Bool
        who created a branch of mathematics called "Boolean Logic" which
        is the centered around the idea of combining logical statements
        that are either <Code>true</Code> or <Code>false</Code>.
    </FunFact>
</Section>

<Section Title="Post Knowledge Check">
    <MultipleChoiceQuestion IsMultiSelect="true" Question="Which of the following are valid ints?" XP=5 GoldAward=100>
        <CheckBoxOption Text="@("\"hello\"")" IsCorrect="false" />
        <CheckBoxOption Text="8" IsCorrect="true" />
        <CheckBoxOption Text="1.7" IsCorrect="false" />
        <CheckBoxOption Text="-17" IsCorrect="true" />
    </MultipleChoiceQuestion>
    <MultipleChoiceQuestion IsMultiSelect="true" Question="Which of the following are valid doubles?" XP=5 GoldAward=100>
        <CheckBoxOption Text="13.1" IsCorrect="true" />
        <CheckBoxOption Text="8" IsCorrect="true" />
        <CheckBoxOption Text="-1.7" IsCorrect="true" />
        <CheckBoxOption Text="false" IsCorrect="false" />
    </MultipleChoiceQuestion>
    <MultipleChoiceQuestion IsMultiSelect="true" Question="Which of the following are valid strings?" XP=5 GoldAward=100>
        <CheckBoxOption Text="@("\"hello\"")" IsCorrect="true" />
        <CheckBoxOption Text="13.1" IsCorrect="false" />
        <CheckBoxOption Text="8" IsCorrect="false" />
        <CheckBoxOption Text="true" IsCorrect="false" />
    </MultipleChoiceQuestion>
    <MultipleChoiceQuestion IsMultiSelect="true" Question="Which of the following are valid bools?" XP=5 GoldAward=100>
        <CheckBoxOption Text="1.7" IsCorrect="false" />
        <CheckBoxOption Text="true" IsCorrect="true" />
        <CheckBoxOption Text="false" IsCorrect="true" />
        <CheckBoxOption Text="0" IsCorrect="false" />
    </MultipleChoiceQuestion>

</Section>

@code {
    public const string Href = "/lessons/variables/basic-data-types";
}