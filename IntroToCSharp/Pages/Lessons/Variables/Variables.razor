@inherits CaptainCoder.Page
@page "/lessons/variables/the-basics"

<Title>Variables</Title>
<Section Title="Introduction">
    <Text>
        An essential part of programming is being able to store data. For
        example, in a video game you might track the amount of experience a
        player has gained throughout their adventure. To do this, programmers
        utilize the computer's <b>Random Access Memory</b> (RAM) to store data. Throughout
        this book we will simply refer to a computer's RAM as <b>memory</b>.
    </Text>
    <Text>
        When programming, we need to be able to store, update, and read data in
        the computer's memory to keep track of information. To help manage this
        complexity, we use variables to give a label to those parts of
        memory. After completing this section, you should know the basics of:
    </Text>
    <MudList Clickable="true">
        <MudListItem Icon="@Icons.Filled.Circle" OnClick="@(() => Utils.ScrollIntoView("Declaring a Variable"))">Declaring a Variable</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle" OnClick="@(() => Utils.ScrollIntoView("Stroing Data"))">Stroing Data in a Variable</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle" OnClick="@(() => Utils.ScrollIntoView("Reading Data"))">Reading Data from a Variable</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle" OnClick="@(() => Utils.ScrollIntoView("Evaluating Variables"))">Evaluating Variables in Code</MudListItem>
    </MudList>
</Section>
<Section Title="Declaring a Variable">
    <Text>
         A <b>variable</b> is a named location in the computer's
        memory where you can store data. This location is called a
        <Keyword Word="memory address"/>. Before you can store
        data in that location, you must first create the location
        by declaring a variable.
    </Text>
    <Text>
        To declare a variable in C#, specify a type and name together. 
    </Text>
    <MudPaper Class="rounded pt-3 pl-4 pr-4" Elevation=3>
        <DeclareRecipe/>
    </MudPaper>
    
    <Text><b>Examples:</b></Text>
    <CodeBlock AllowCopy>int playerScore;</CodeBlock>
    <Text>
        The code above <b>declares</b> a variable named <Code>playerScore</Code>
        that can store an <Keyword Word="int"/>.
    </Text>
    <CodeBlock AllowCopy>string playerName;</CodeBlock>
    <Text>
        The code above <b>declares</b> a variable named <Code>playerName</Code>
        that can store a <Keyword Word="string"/>.
    </Text>
    <Note>
        Don't worry too much about the specifics of the data types above for
        now. All you need to know for now is that an <Code>int</Code> is a
        number and a <Code>string</Code> is text.
    </Note>
    
    <SimpleCodeQuestion Question="What is the name of the variable?">
        <Block><CodeBlock AllowCopy>int hitPoints;</CodeBlock></Block>
        <Answer><CheckBoxOption Text="int" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="Hit Points" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="hitPoints" IsCorrect="true" /></Answer>
        <Answer><CheckBoxOption Text="integer" IsCorrect="false" /></Answer>
    </SimpleCodeQuestion>

    <SimpleCodeQuestion Question="What is the type of the variable?">
        <Block><CodeBlock AllowCopy>string monsterName;</CodeBlock></Block>
        <Answer><CheckBoxOption Text="string" IsCorrect="true" /></Answer>
        <Answer><CheckBoxOption Text="monster" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="Name" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="monserName" IsCorrect="false" /></Answer>
    </SimpleCodeQuestion>
</Section>

<Section Title="Storing Data">
    <Text>
        Once a variable has been declared, it is possible to store data in the
        computer's memory. To do this, we use the <b>assignment operator</b> (<Code>=</Code>)
        to store a value at the location specified by a variable name.
    </Text>
    
    <MudPaper Class="rounded pt-3 pl-4 pr-4" Elevation=3>
        <StoringDataRecipe />
    </MudPaper>

    <Text><b>Examples</b></Text>
    <CodeBlock>
        int playerScore;
playerScore = 0;
    </CodeBlock>
    <Text>
        The above example assigns <Code>playerScore</Code> to store the value
        <Code>0</Code>. Because this is the first time we are assigning a value
        to <Code>playerScore</Code> we say that we are <b>initializing</b> it.
    </Text>

    <Note Class="mb-5 pa-2">
        Initializing a variable immediately after declaring it happens so often there is special
        syntax:
        <CodeBlock>int playerScore = 0;</CodeBlock>
    </Note>
    <Text>
        After a variable has been assigned a value, it can be updated to a new value:
    </Text>
    <CodeBlock>
        int playerScore = 0;
playerScore = 4;
    </CodeBlock>
    <Text>
        In the example above, the <Code>playerScore</Code> variable is first initialized
        to <Code>0</Code>. Then, it is re-assigned to store the value <Code>4</Code>.
    </Text>
    <SimpleCodeQuestion Question="What value is monsterHealth initialized to?">
        <Block><CodeBlock>int monsterHealth = 42;</CodeBlock></Block>
        <Answer><CheckBoxOption Text="int" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="42" IsCorrect="true" /></Answer>
        <Answer><CheckBoxOption Text="health" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="integer" IsCorrect="false" /></Answer>
    </SimpleCodeQuestion>
    <SimpleCodeQuestion Question="What value is stored in dragonHealth?">
        <Block>
            <CodeBlock>
int dragonHealth = 420;
dragonHealth = 401;
            </CodeBlock>
        </Block>
        <Answer><CheckBoxOption Text="int" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="420" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="dragonHealth" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="401" IsCorrect="true" /></Answer>
    </SimpleCodeQuestion>
    <SimpleCodeQuestion Question="What value is the playerHealth variable initialized to?">
        <Block>
            <CodeBlock>
int playerHealth = 20;
playerHealth = 15;
            </CodeBlock>
        </Block>
        <Answer><CheckBoxOption Text="integer" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="15" IsCorrect="false" /></Answer>
        <Answer><CheckBoxOption Text="20" IsCorrect="true" /></Answer>
        <Answer><CheckBoxOption Text="health" IsCorrect="false" /></Answer>
    </SimpleCodeQuestion>
</Section>

<Section Title="Reading Data">
    <Text>
        After a variable has been assigned a value, you can read the value by using the
        variable's name in an expression:
    </Text>
    <CodeBlock ReplIt="JoshuaJoshJosh1/VariablesExample">
string name = "Bob";
Console.WriteLine(name + " is learning C#!");
    </CodeBlock>
    <Text>
        In the above example, the computer reads the data stored in the
        <Code>name</Code> variable and substitutes it into the expression. It
        then uses the value to produce the message "Bob is learning C#!"
    </Text>
    <MultipleChoiceQuestion IsMultiSelect="true" Question="What are the 3 components of a variable?"
        Explanation="Variables have only a name, type, and data, but do not have a list or family."
        XP=10
        GoldAward=25>
        <CheckBoxOption Text="Data" IsCorrect="true" />
        <CheckBoxOption Text="List" IsCorrect="false" />
        <CheckBoxOption Text="Name" IsCorrect="true" />
        <CheckBoxOption Text="Data Type" IsCorrect="true" />
    </MultipleChoiceQuestion>
</Section>
<Section Title="Evaluating Variables">
    <CodeBlock>
        int z = x + y;
    </CodeBlock>
    <Text>
        When the computer encounters the code above, it must first
        <b>evaluate</b> <Code>x</Code> and <Code>y</Code> before it can
        determine what value should be stored in <Code>z</Code>. To <b>evaluate</b>,
        a variable, the computer <b>reads</b> the value stored in memory and
        substitutes it into the <b>expression</b>.
    </Text>
    <Text>
        Let's assume that <Code>x</Code> stores the value <Code>5</Code> and
        <Code>y</Code> stores the value <Code>7</Code>. During evaluation, the
        computer will substitute the values in like this:
    </Text>
    <CodeBlock>
        int z = 5 + 7;
    </CodeBlock>
    <Text>
        It will then add them together:
    </Text>
    <CodeBlock>
        int z = 12;
    </CodeBlock>
    <Text>
        And finally, it assigns the variable <Code>z</Code> to store the value <Code>12</Code>.
    </Text>
</Section>
<Section Title="A Complex Example">
        <IntroToCSharp.Pages.Lessons.Variables.Examples.ComplexAssignmentExample/>
</Section>

<Section Title="Challenge: Evaluating Variables">
        <Text>Study the code below:</Text>
        <CodeBlock>
int x = 5;
int y = x + 1;
x = x - 1;
y = x + y;
int z = x + y - 5;
x = 6;
        </CodeBlock>
        <SimpleCodeQuestion Question="What is stored in x?">
            <Block><CodeBlock>Console.WriteLine(x);</CodeBlock></Block>
            <Answer><CheckBoxOption Text="10" IsCorrect="false"/></Answer>
            <Answer><CheckBoxOption Text="6" IsCorrect="true"/></Answer>
            <Answer><CheckBoxOption Text="1" IsCorrect="false"/></Answer>
            <Answer><CheckBoxOption Text="9" IsCorrect="false"/></Answer>
        </SimpleCodeQuestion>
        <SimpleCodeQuestion Question="What is stored in y?">
            <Block><CodeBlock>Console.WriteLine(y);</CodeBlock></Block>
            <Answer><CheckBoxOption Text="10" IsCorrect="true"/></Answer>
            <Answer><CheckBoxOption Text="6" IsCorrect="false"/></Answer>
            <Answer><CheckBoxOption Text="1" IsCorrect="false"/></Answer>
            <Answer><CheckBoxOption Text="9" IsCorrect="false"/></Answer>
        </SimpleCodeQuestion>
        <SimpleCodeQuestion Question="What is stored in z?">
            <Block><CodeBlock>Console.WriteLine(z);</CodeBlock></Block>
            <Answer><CheckBoxOption Text="10" IsCorrect="false"/></Answer>
            <Answer><CheckBoxOption Text="6" IsCorrect="false"/></Answer>
            <Answer><CheckBoxOption Text="1" IsCorrect="false"/></Answer>
            <Answer><CheckBoxOption Text="9" IsCorrect="true"/></Answer>
        </SimpleCodeQuestion>
</Section>
@code {
    public static string Href { get; } = "/lessons/variables/the-basics";
    public bool _isOpen = true;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
}