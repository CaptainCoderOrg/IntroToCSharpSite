@inherits CaptainCoder.Page
@page "/lessons/variables/user-input"
<Title>User Input</Title>
<Section Title="Introduction">
    <Adventure Portrait="@Portraits.CaptainCoder">
        <Item>
            <AdventureDialog Page="@AsciiArt.PageRef">
                <Text>
                    In the <b>@AsciiArt.PageRef.Name</b> activity, you write
                    programs that always produce the same output when they are
                    executed. This can be really fun! However, this type of
                    program doesn't allow for any user interactions.
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog>
                <Text>
                    In this lesson, you learn to use the
                    <Code>Console.ReadLine</Code> <b>method</b> to allow the
                    user to interact with your program by providing text input.
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Page="@ConsoleProject.PageRef">
                <Text>
                    Before starting, make sure you know how to
                    create a new Console Project. If you need a refresher, I can
                    show you how in the <b>@ConsoleProject.PageRef.Name</b>
                    section.
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Page="@VariableBasics.PageRef">
                <Text>
                    Throughout the lesson you will be using <b>string
                    variables</b>. It is okay if you do not know what a
                    <b>string</b> or a <b>variable</b> is yet. However, if
                    you would like to learn more about <b>variables</b> you
                    should checkout out the <b>@VariableBasics.PageRef.Name</b>
                    lesson.
                </Text>
            </AdventureDialog>
        </Item>
    </Adventure>
</Section>
<Section Title="Learning Objectives">
    <MudList Clickable="true">
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to <b>declare</b> a <b>string variable</b></MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to use the <b>assignment operator</b> (<Code>=</Code>) to store a <b>value</b> in a <b>variable</b></MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to use the <Code>Console.ReadLine</Code> <b>method</b> to read user input from the terminal</MudListItem>
    </MudList>
</Section>
<Questions Title="Pre-Knowledge Check">
    <Message>
        Try to answer the questions below. Don't be tempted to peek
        ahead to find the answers. It is okay if you don't know the answer yet.
        The goal is to see what you already know and where you have room to
        learn and grow.
    </Message>
    <ChildContent>
        <Question Text="What is a variable?" />
        <Question Text="What is a string?" />
        <Question Text="What does it mean to declare a variable?"/>
        <Question Text="What is a method?" />
    </ChildContent>
</Questions>
<Section Title="A Simple Example">
    <Text>
       In the <b>@AsciiArt.PageRef.Name</b> activity, you create a program that, when
       executed, always produces the same output. In many ways, this isn't particulary
       useful. Most programs expect a user to provide input, perform a task with that
       input, and then produce an output.
    </Text>
    <TaskItem Name="PlayMadTake">Run the program below</TaskItem>
    <TaskItem Name="CompletePrompts">Complete the prompts to see the output</TaskItem>
    <ReplIt Path="JosephCollard/MadTakes"/>
    <Text>
       The program above accepts 4 inputs and then produced a silly song. If you execute the program
       multiple times, you can provide new inputs and the program will produce a different output.
    </Text>
</Section>
<Section Title="Getting Started">
    <ConsoleProjectTask Name="Create Project">If you have not done so, create a new console project named "User Input"</ConsoleProjectTask>
    <Text>
        C# provides many built in <Keyword Word="methods"/> that can be used to
        accomplish a variety of tasks. A <b>method</b> is a reusable piece of code.
        When you use a <b>method</b>, you say that
        you are "calling" the <b>method</b>. So far, you have called the
        <Code>Console.WriteLine</Code> <b>method</b> to display text in the terminal.
        Similarily, you can read text that is typed into the terminal by calling
        the <Code>Console.ReadLine</Code> method.
    </Text>
    <TaskItem Name="FirstReadLine">Update your <Code>Program.cs</Code> with the code below:</TaskItem>
    <CodeBlock>
Console.Write("Enter your name: ");
Console.ReadLine();
Console.WriteLine("Nice to meet you!");
    </CodeBlock>
    <TaskItem Name="RunProgram">Save and Run your program. <Code>dotnet run</Code></TaskItem>
    <Text>
        If all went well, you will be prompted to enter your name in the terminal.
    </Text>
    <Image Src="first-readline.png"/>
    <Text>
        When you run your program, it executes each statement in order from top
        to bottom. When it encounters the <Code>Console.ReadLine</Code> method, it will
        suspend execution and wait for the user to type something into the
        console before continuing to execute.
    </Text>
</Section>

<Section Title="Declaring a Variables">
    <Text>
        A <b>variable</b> is a named location in the computer's memory where
        you can store a <b>value</b>. This location is called a <b>memory address</b>.
        Before you can store a <b>value</b> in a <b>memory address</b>, you must first create
        a label by <b>declaring</b> a <b>variable</b>.
    </Text>
    <Text>To declare a <b>variable</b> in C#, you specify a <b>type</b> and <b>variable name</b> together:</Text>
    <DeclareRecipe/>
    <Text><b>Example:</b></Text>
    <CodeBlock AllowCopy>string playerName;</CodeBlock>
    <Text>
        The code above <b>declares</b> a <b>variable</b> named <Code>playerName</Code>
        that can store a <Keyword Word="string"/>.
    </Text>
</Section>
<Section Title="Add a userName to your program">
    <Text>
        Currently, your program displays, <Code>Enter your name: </Code>. It then waits for the
        user to enter text and press enter. Then, it exits.
    </Text>

    <TaskList Name="Declare Variable">
        <TaskItem Name="declare-string">
            Update your program to <b>declare</b> a <b>string variable</b> named <Code>userName</Code>
        </TaskItem>
    </TaskList>

    <CodeBlock>
Console.Write("Enter your name: ");
string userName; // &lt;--
Console.ReadLine();
Console.WriteLine("Nice to meet you!");
    </CodeBlock>

    <Text>
        In the line added above, you <b>declare</b> a <b>variable</b> named
        <b>userName</b> which can store <b>string</b> values. A <b>string</b> is
        a data type that can store text.
    </Text>
    <Note>
        For now, don't worry too much about the details here just know that you
        are creating a label "userName" that is able to store text.
    </Note>
</Section>

<Section Title="Storing User Input">
    <Text>
        Now that you have a space to store text, you can use the <Keyword
        Word="assignment operator"/> (<Code>=</Code>) to assign the <b>value</b>
        entered by the user to be stored in the <Code>userName</Code> variable.
    </Text>
    <TaskList Name="Assignment">
        <TaskItem Name="assign-value">
            Update your program to assign the user's response to be stored in the <Code>userName</Code> variable
        </TaskItem>
    </TaskList>

    <CodeBlock>
Console.Write("Enter your name: ");
string userName;
userName = Console.ReadLine(); // &lt;--
Console.WriteLine("Nice to meet you!");
    </CodeBlock>

    <Note>
        You likely have two warning messages in your program at this point.
        For now, this is perfectly fine. There is a section at the end of
        this activity that will explains what these mean and how to fix them.
        <Image Src="warnings.png"/>
    </Note>

    <Text>
        When the <Keyword Word="statement"/> <Code>userName = Console.ReadLine();</Code> is executed
        the <Keyword Word="expression"/> on the right side of the assignment operator is <Keyword Word="evaluated"/>.
        In this case, the <b>expression</b> is <Code>Console.ReadLine()</Code>. When <Code>Console.ReadLine()</Code>
        is <b>evaluated</b>, the program waits for the user to enter text. Then, it <b>evaluates</b> to the
        <b>value</b> the user entered.
    </Text>
</Section>
<Section Title="Reading a value from a Variable">
    <Text>
        After a <b>value</b> has been stored in a <b>variable</b>, you can access that <b>value</b> by using the <b>variable's</b> name.
    </Text>

    <TaskList Name="Retrieve">
        <TaskItem Name="retrieve-value">
            Update your program to display <Code>"Nice to meet you," + userName + "!"</Code>.
        </TaskItem>
        <TaskItem Name="run-code">
            Run your updated program.
        </TaskItem>
    </TaskList>

    <CodeBlock>
Console.Write("Enter your name: ");
string userName;
userName = Console.ReadLine();
Console.WriteLine("Nice to meet you, " + userName + "!");
    </CodeBlock>
    <Text>
        If all went well, your output should look similar to this:
        <Image Src="output.png" />
    </Text>

    <Text>
        When the computer encounters a <b>variable</b> name while executing
        a program, it <b>evaluates</b> the <b>variable</b> by looking up the <b>value</b>
        stored in memory and substituting that <b>value</b> into the program.
        After <b>evaluation</b>, the computer continues to execute the program.
    </Text>
    <IntroToCSharp.Pages.Lessons.Variables.Examples.BasicInputExampleStepper/>
</Section>
<Section Title="Resolving the Warning">
    <Text>
        As mentioned above, your program has an annoying warning message that
        says: <b>warning CS8600: Converting null literal or possible null value
        to non-nullable type.</b>
    </Text>
    <Text>
        A <b>warning</b> is a way for the compiler to say, "This code will run but
        I think you have made a mistake." In this particular case the
        compiler is warning you that the <Code>Console.ReadLine</Code> method can
        technically return a "<b>null</b>" value. A <b>null</b> value is a "lack"
        of a value. The compiler is warning you that you have declared a <b>string</b>
        that should not be <b>null</b>. There are two possible fixes for this warning:
    </Text>
    <HorizontalDivider/>
    <Text>
        The first option is to add a question mark (<Code>?</Code>) to the end
        of the type in the <b>declaration</b>:
    </Text>
    <CodeBlock>string? userName;</CodeBlock>
    <Text>
        This tells the compiler that the variable <b>noun</b> is allowed to
        store nothing (<b>null</b>).
    </Text>
    <HorizontalDivider/>
    <Text>
        The second option is to add an exclamation point (<Code>!</Code>) to the
        end of the <Code>Console.ReadLine()</Code> expression:
    </Text>
    <CodeBlock>userName = Console.ReadLine()!;</CodeBlock>
    <Text>
        This tells the compiler that you <b>PROMISE</b> that the expression
        preceding the <Code>!</Code> will not be <b>null</b>.
    </Text>
    <Note>
        One thing to note here is that using the <Code>!</Code> doesn't actually
        prevent the code from evaluating to <b>null</b>. Instead, you are making
        a promise to the compiler which will then assume that you are correct
        and no longer complain.
    </Note>
    <HorizontalDivider/>
    <Text>
        When writing a program that you expect there to be a user typing in a
        response, you can safely use the second option (<Code>!</Code>) when
        calling <Code>Console.ReadLine()</Code>.
    </Text>

    <TaskItem Name="Remove Warning">Update your code to use <Code>userInput = Console.ReadLine()!;</Code></TaskItem>
    <TaskItem Name="Verify Warning is Gone">Save your program and run it to verify the warning is gone. (<Code>dotnet run</Code>)</TaskItem>
</Section>

<Questions Title="Post-Knowledge Check">
    <Message>
        Now that you've completed the activity, try to answer the questions below
        to see what you learned and identify areas where you should review. If
        you're not sure of an answer, you should look back and see if you can find it.
    </Message>
    <ChildContent>
        <Question Text="What is a variable?" />
        <Question Text="What is a string?" />
        <Question Text="What does it mean to declare a variable?"/>
        <Question Text="What is a method?" />
    </ChildContent>
</Questions>

<Section Title="Challenge: A Short Mad Take">
    <AShortMadTakeChallenge />
</Section>

<Section Title="What's Next?">
    <Adventure Portrait="@Portraits.CaptainCoder">
        <Item>
            <AdventureDialog>
                <Text>
                    Who would've thought writing a simple program that reads
                    user input would be so involved! With a little bit of
                    practice, this will start to feel like second nature.
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Page="@MadTakes.PageRef">
                <Text>
                    With the knowledge you've learned here, you're definitely
                    ready to take on the <b>@MadTakes.PageRef.Name</b>
                    activity. In that activity, you will design a colorful
                    interactive program that will entertain your friends and family!
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Page="@VariableBasics.PageRef">
                <Text>
                    If you have not done so yet, now might be a good time to
                    take a deeper dive into understanding how <b>variables</b> work
                    in C#. The <b>@VariableBasics.PageRef.Name</b> lesson should
                    help clarify some of the questions you might have about them.
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <MarkFinishedDialog Page="UserInput.PageRef"/>
        </Item>
    </Adventure>
</Section>

@code
{
    public static readonly PageRef PageRef = new PageRef("User Input", "/lessons/variables/user-input", 1, "Variables");
}