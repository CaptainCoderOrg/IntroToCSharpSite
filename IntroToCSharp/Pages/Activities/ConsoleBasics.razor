@page "/activities/console-basics"

<h1>Console Basics</h1>
<Section Title="Overview">
    <p>
        Throughout this book, we will utlize a console to perform relatively
        basic tasks such as creating folders and files, navigating said folders
        and files, and running the .NET Command Line Interface (CLI).
    </p>
    <p>
        All of the commands in this book assume you are using a Linux based console.
        If you are completely new to using the console, I recommend using the Replit
        console features built into this book to gain familiarity with the process.
        As we progress through the book, you will eventually graduate to using a 
        console on your own computer.
    </p>
    <Note>
        Some of the commands in this book are not available when using Windows Command Prompt
        or Windows Power Shell. I personally use "Git Bash" when I work in my
        Windows environment as it supports most Linux based commands which are
        quite popular among developers.
    </Note>
</Section>
<Section Title="Learning Objectives">
    <p>
        At the end of this activity, you should be able to:
    </p>
    <MudList Clickable="true">
        <MudListItem Icon="@Icons.Filled.Circle">Describe the purpose of a console</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">"Talk" with a computer using a console</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Execute a command using the command prompt</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Create new files and folders using the command prompt</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Navigate a computers file system using the command prompt</MudListItem>
    </MudList>
</Section>
<Section Title="Before Starting">
    <p>
        Before starting this activity, you should have access to a Linux based
        console that has the .NET 6 CLI available. 
        If you have a Replit account, you can fork this 
        <ReplitLink Path="JosephCollard/C-Project">C# Project</ReplitLink>
        which is configured specifically for this activity. If you need
        a refresher for forking / connecting a Replit project to this book,
        you can follow the instruction here: 
        <MudLink Href="getting-started/replit-console">LINK</MudLink>.
    </p>
</Section>
<Questions Title="Pre-Knowledge Check">
    <Message>
        Let us start with a quick knowledge check to see what we already know and
        where we have room to learn and grow. Don't be tempted to peek ahead at
        the answers. It is okay if you don't know the answer yet. The goal here
        is to see what knowledge we already have, what we think we know, and
        areas where we need to learn.
    </Message>
    <ChildContent>
        <Question Text="What is a console?" />
        <Question Text="What is a command prompt?" />
        <Question Text="What is a command?" />
        <Question Text="What is an argument?" />
        <Question Text="What is a directory?" />
        <Question Text="What is an absolute path?" />
        <Question Text="What is a relative path?" />
    </ChildContent>
</Questions>

<Section Title="The Console">
    <p>
        You have most likely heard the word <Keyword Word="console" /> in the
        context of video games. In general, a <Keyword Word="console" /> is
        a device that is used to send data to and receive data from a computer.
        When you use a video game <Keyword Word="console" />, you are sending
        your controller inputs to a computer which interprets them and sends
        video data to a screen and audio data to your speakers. 
        Throughout this book, we will use the term <Keyword Word="console" /> 
        to refer to the console you will  use to interact with the computer 
        that is compiling and executing your C# code.
    </p>
    <TaskItem Name="Open Console">Start by opening your console</TaskItem>
    <p>
        There are quite a few different consoles that you could be using. On 
        Replit you see an area below your file editor labeled "Console".
        On Mac OSX you will typically see a program called "Terminal". On Windows
        you might be using "Windows Command Prompt" or "Git Bash". On a Linux
        based operating system you might be using "XTerm". Each of these looks
        slightly different but they also have commonalities.
    </p>
</Section>
<Section Title="Command Prompt">
    <p>
        Although each of the consoles shown above look different, they serve a 
        common purpose:
        to allow the user to communicate with the operating system. To do this,
        the user types in <Keyword Word="commands" /> and sends them to the
        operating system. The operating system then attempts to interpret the 
        command and peform the task. In many (but not all) cases, the operating
        system will then output text to the console informing the user of the
        result.
    </p>
    <p>
        You may have noticed that you can type text into your console. The area
        where you are typing is called the <Keyword Word="command prompt" />. The
        <Keyword Word="command prompt" /> can be thought of as your computer's way
        of "prompting" you for a task. Much like a genie, your computer sits
        and waits for you to give it a command. Let's start by typing in a few
        commands, examining the results, and seeing if we can guess what each
        command does.
    </p>
    <Note>
        After typing in a command, you can send it to the computer by pressing
        enter (or return on a Mac keyboard).
    </Note>
</Section>

<Questions Title="Try A Few Commands">
    <Message>
        For each of the commands, first run the command in your terminal. 
        Then, based on the output, guess what the command does. Note, for the best
        experience, have a file explorer open while you run each of the commands.
        Be sure you enter these commands <b>EXACTLY</b> as they appear including spaces
        and capitalization.
    </Message>
    <ChildContent>
        <Question Text="date" />
        <Question Text="echo Hello World" />
        <Question Text="touch NewFile.txt" />
        <Question Text="mkdir NewFolder" />
        <Question Text="mkdir New Folder" />
        <Question Text="go steve go" />
    </ChildContent>
</Questions>

<Section Title="Understanding the Commands">
    <p>
        When you type something into the terminal and press enter, the text you entered
        is sent to your operating system and the operating system tries to figure out
        what to do with it. The first word is typically referred to as a <Keyword Word="command"/>.
        If the operating system finds a program associated with the command,
        it runs the program and uses the remaining words as inputs for the command. These
        remaining words are referred to as <Keyword Word="arguments"/>.
    </p>
    <p>
        For example:
        <MudList Clickable="true">
            <MudListItem Icon="@Icons.Filled.Circle"><Code>date</Code> - Executes the date command which displays the current date and time</MudListItem>
            <MudListItem Icon="@Icons.Filled.Circle"><Code>echo Hello World</Code> - Executes the echo command which displays its arguments (Hello and World)</MudListItem>
            <MudListItem Icon="@Icons.Filled.Circle"><Code>touch NewFile.txt</Code> - Executes the touch command which creates a file if it does not exist with the same name as its argument</MudListItem>
            <MudListItem Icon="@Icons.Filled.Circle"><Code>mkdir NewFolder</Code> - Executes the mkdir command which creates a new folder with the same name as its argument</MudListItem>
            <MudListItem Icon="@Icons.Filled.Circle"><Code>mkdir New Folder</Code> - Executes the mkdir command which creates two new folders "New" and "Folder"</MudListItem>
            <MudListItem Icon="@Icons.Filled.Circle"><Code>go steve go</Code> - Tries to find the go command but fails and reports that no go command exists</MudListItem>
            <MudListItem Icon="@Icons.Filled.Circle"><Code>ls</Code> - Executes the ls command which lists the files in the current folder</MudListItem>
        </MudList>
    </p>
</Section>
<Questions Title="Quick Review">
    <Message>For each of the following, specify the name of the command being issued and the number of arguments that are being specified.</Message>
    <ChildContent>
        <Question Text="echo Hello World" Spoiler="The command is echo. It is given 2 arguments: Hello and World." />
        <Question Text="date" Spoiler="The command is date. There are no arguments." />
        <Question Text="touch NewFile.txt" Spoiler="The command is touch. There is 1 argument: NewFile.txt" />
        <Question Text="mkdir A New Folder" Spoiler="The command is mkdir. There are 3 arguments: A, New, and Folder." />
        <Question Text="ls -laF" Spoiler="The command is ls. There is 1 argument: -laF" />
    </ChildContent>
</Questions>

<Section Title="The File System">
    <p>
        One of the most important things to be able to do in the console is to navigate the file system. 
        When you execute a command, that command is run within the context of the current 
        <Keyword Word="directory"/>. A <Keyword Word="directory"/> is a fancy word for a 
        "folder" on a computer. By executing a command within a specific <Keyword Word="directory"/>,
        the program that runs has context for where to look for specific files. For example,
        when you ran the <Code>mkdir</Code> and <Code>touch</Code> commands. The 
        result was to create the folder / file within that specific directory. 
        You can use the <Code>pwd</Code> command to "print the working directory".
        This will display the absolute path to the current location of the console.
    </p>
    <TaskItem Name="Run pwd">Run the pwd command</TaskItem>
    <Question Text="What is your current working directory?"/>
    <p>
        It is possible to change the current working directory by using the <Code>cd</Code>
        command. This command is short for "change directory". If you type the command
        with no arguments, it will navigate to your "HOME" directory. This is typically
        where your console will open. If you type the command with an argument, it will
        attempt to navigate to the specified directory.
    </p>
    <TaskList Name="A Project Directory">
        <TaskItem Name="LS">Run <Code>ls</Code> to list the contents of your currect directory</TaskItem>
        <TaskItem Name="Make New Directory">Run <Code>mkdir project</Code> to create a new directory named project</TaskItem>
        <TaskItem Name="LS">Run <Code>ls</Code> again.</TaskItem>
        <Question Text="What is different from the previous execution of ls?" />
        <TaskItem Name="CD Project">Run <Code>cd project</Code> to navigate to the new project directory</TaskItem>
        <TaskItem Name="PWD Project">Run <Code>pwd</Code> to see the new working directory</TaskItem>
        <Question Text="What is the absolute path to your new project directory?"/>
    </TaskList>
    <p>
        Notice, the absolute path of the project directory is prefixed by the directory you started in.
        This prefix is referred to as the parent directory. To navigate to it from the current directory
        we can execute the command <Code>cd ..</Code>. These two dots are a special symbol which
        refers to the current directories parent. Try it out now:
    </p>
    <TaskList Name="Parent Directory">
        <TaskItem Name="LS">Run <Code>cd ..</Code></TaskItem>
        <TaskItem Name="PWD">Run <Code>pwd</Code></TaskItem>
    </TaskList>
    <p>
        If all went well, you should now be in the directory which contains the 
        project directory you created earlier.
    </p>
</Section>
<Section Title="Absolute File Paths">
    <p>
        Often times you will want to refer to a file or directory that is not in
        your current working directory. To do this, you can specify its absolute
        path. Let's try it out now:
    </p>
    <TaskList Name="Complex Navigation">
        <TaskItem Name="pwd">Run <Code>pwd</Code></TaskItem>
        <Question Text="Write your current directory here so you can remember it." />
        <TaskItem Name="Goto Root">Run <Code>cd /</Code>. This will navigate to your "root" directory.</TaskItem>
        <TaskItem Name="pwd root">Run <Code>pwd</Code></TaskItem>
        <TaskItem Name="Goto previous path">Return to the previous directory by running <Code>cd PUT_PATH_HERE</Code> substituting the path you wrote down above.</TaskItem>
        <TaskItem Name="pwd again">Run <Code>pwd</Code></TaskItem>
    </TaskList>
    <p>
        When you navigated to "/", this brought you to a special directory known as the "root" directory.
        You can think of this directory as the base of a tree (thus the name). All of the 
        files and directories on your computer can be accessed from this location by navigating
        through the appropriate directories.
    </p>
    <Question Text="What do you think happens if you run 'cd ..' in the root directory?" Spoiler="It may seem odd but the root directory is its own parent. Running 'cd ..' in the root directory brings you to the root directory!" />
</Section>
<Section Title="Relative File Paths">
    <p>
        Often times you will want to refer to a file or directory that is not
        in your current working directory but is close to your current working
        directory. To do this, you can specify a relative path.
        Let's try it out now:
    </p>
    <TaskList Name="Relative Navigation">
        <TaskItem Name="Goto project dir">Use the <Code>cd</Code> command to navigate to the project directory you created previously</TaskItem>
        <TaskItem Name="PWD">Run <Code>pwd</Code> to verify you're in the correct location</TaskItem>
    </TaskList>
    <p>
        Let's imagine we want to create a directory that is a sibling of the project directory. To do this, you might navigate to
        the parent directory using <Code>cd ..</Code> and then make a new directory using the <Code>mkdir</Code> command.
        However, it is possible to do this in a single command by using a relative path. In this case, the relative
        path is <Code>../NameOfDirectory</Code>. Let's try it now:
    </p>
    <TaskList Name="Make Relative Directory">
        <TaskItem Name="Mkdir">Run <Code>mkdir ../sibling</Code></TaskItem>
        <TaskItem Name="CD">Run <Code>cd ../sibling</Code></TaskItem>
        <TaskItem Name="PWD">Run <Code>pwd</Code></TaskItem>
        <TaskItem Name="CD ..">Run <Code>cd ..</Code></TaskItem>
        <TaskItem Name="ls">Run <Code>ls</Code></TaskItem>
        <TaskItem Name="Mkdir project/images">Run <Code>mkdir project/images</Code></TaskItem>
        <TaskItem Name="CD project">Run <Code>cd project</Code></TaskItem>
        <TaskItem Name="ls project">Run <Code>ls</Code></TaskItem>
        <TaskItem Name="cd images">Run <Code>cd images</Code></TaskItem>
        <TaskItem Name="pwd image">Run <Code>pwd</Code></TaskItem>
        <TaskItem Name="cd ../..">Run <Code>cd ../..</Code></TaskItem>
        <TaskItem Name="pwd root">Run <Code>pwd</Code></TaskItem>
    </TaskList>
    <p>
        Relative paths make it easy to navigate and reference files and directories
        that are nearby the current working directory.
    </p>
</Section>


<Questions Title="Post-Knowledge Check">
    <Message>
        Now that you've completed the activity, let's do a quick knowledge check
        to see what you learned and identify areas where you should review
        (feel free to look back and find the answers).
    </Message>
    <ChildContent>
        <Question Text="What is a console?" />
        <Question Text="What is a command prompt?" />
        <Question Text="What is a command?" />
        <Question Text="What is an argument?" />
        <Question Text="What is a directory?" />
        <Question Text="What is an absolute path?" />
        <Question Text="What is a relative path?" />
    </ChildContent>
</Questions>