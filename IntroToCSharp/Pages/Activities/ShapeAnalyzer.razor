@inherits CaptainCoder.Page
@page "/activities/shape-analyzers"

<Title>@((MarkupString)Title)</Title>

<Section Title="Introduction">
    <Adventure Portrait="Portraits.Nefaria">
        <Item>
            <AdventureDialog Portrait="Portraits.CaptainCoder" OnLoad="ReverseTitle">
                    Greetings coder! Congratulations on reaching
                    <b>Nefaria's</b> first <b>Gauntlet</b>: <b>Shape
                    Analyzers</b>.
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog OnLoad="UpdateTitle">
                So, you're the new "coder" that the <b>Captain</b> won't stop
                talking about... pathetic. Do you really think you're ready for
                my <b>Shape Analyzers ... of <span style="color: red">DOOM</span></b>?
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog>
                What is a "<b>Gauntlet</b>" you ask? Oh, ho ho! Why it is a
                series of challenges to test all that you've learned and prove
                to that I will always be the <b>Captain's</b> <i>BEST</i>
                student!
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Portrait="Portraits.CaptainCoder" OnLoad="ReverseTitle">
                Don't mind <b>Nefaria</b>... she can be a little bit competitive when it
                comes to coding. Why don't you prove to her that you're on your
                way to being a great programmer by completing the <b>Shape Analyzers</b>?
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog OnLoad="UpdateTitle">
                Blah, blah, blah... You can <b>try</b> to complete the <b>Shape
                Analyzers ... of <span style="color: red">DOOM</span></b>!
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Portrait="Portraits.CaptainCoder">
                Don't worry if one of the challenges is too tough for you right now, you
                can always train more and come back when you're ready. Or, you can move
                past a challenge and try another one.
            </AdventureDialog>
        </Item>
        <Item>
        <AdventureDialog Portrait="Portraits.CaptainCoder" Page="@BasicArithmetic.PageRef">
                I took a look at the challenges to give you some tips. Before
                starting, you should be familiar with performing arithmetic on
                variables. This means you need to be able to add, subtract,
                divide, and multiply with the <b>arithmetic operators</b>.
                Don't worry if you need a bit of a refresher, the
                <b>@BasicArithmetic.PageRef.Name</b> lesson is a great place to
                look.
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Portrait="Portraits.CaptainCoder" Page="@ConvertingTypes.PageRef">
                <Text>
                    It seems that these challenges will also draw on your skill
                    to <b>@ConvertingTypes.PageRef.Name</b>. That means you'll
                    need to know how to <b>parse</b> <b>strings</b> into numeric
                    types with the <Code>Parse</Code> <b>method</b>!
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog Portrait="Portraits.CaptainCoder" OnLoad="ReverseTitle">
                <Text>
                    Once you've trained these concepts, be brave and conquer this <b>Gauntlet</b>!
                    The <b>Shape Analyzers</b> will help
                    you master these skills and bring you one step closer
                    to <b>C#</b> greatness. Good luck!
                </Text>
            </AdventureDialog>
        </Item>
        <Item>
            <AdventureDialog OnLoad="UpdateTitle">
                <Text>
                    Yes... "Good luck" with my <b>Gauntlet: Shape Analyzers ...
                    of <span style="color: red">DOOM</span></b>. You're going to
                    need it!
                </Text>
            </AdventureDialog>
        </Item>

    </Adventure>
</Section>

<Section Title="Perimeter of a Rectangle">
    <Text>
        In this challenge you will calculate the perimeter of a rectangle. Calculating the perimeter of a rectangle
        comes in handy in all walks of life. From building a castle to finding out how many christams lights would need
        to wrap your around your entire house, understanding the perimeter of an object is important. The perimeter tells
        you the distance around an entire object.
    </Text>
    <Text>
        To calculate the perimeter of a rectangle you add the <b>width</b> of a rectangle to its <b>height</b> and then
        multiply that by two. The formula is: <Code>2 * (Width + Height)</Code>. By the end of this challenge you will have a program
        capable of figuring out the perimeter of a given rectangle! In the end, you will have something that looks like this:
    </Text>
    <Text>
        Before starting the project you should look at the problem and consider what variables you might need and what data types
        that you'd like to use and why. We can see that we are going to be working with numbers when using these data types as well
        as needing prompts to tell the user what they need to enter. What data types would be most useful to do this?
    </Text>
    <PerimeterOfARectangle />
</Section>
<Section Title="Area of a Rectangle">
    <Text>
        In this challenge you will calculate the area of a rectangle. Like calculating the area of a perimeter, the area of a
        rectangle will call on many of the same skills. The area of a rectangle tells us how big the inside of the rectangle is.
        It is useful for when you want to figure out how much you can fit into a rectangle!
    </Text>
    <Text>
        To calculate the area of a rectangle you need to multiply the <b>width</b> of the rectangle by its <b>height</b>! The
        formula is: <Code>(Width * Height)</Code>. That's it! By the end of your program you should have something that looks like this:
    </Text>
    <Text>
        Before starting the project you should look at the problem and consider what variables you might need and what data types
        that you'd like to use and why. We can see that we are going to be working with numbers when using these data types as well
        as needing prompts to tell the user what they need to enter. What data types would be most useful to do this?
    </Text>
    <AreaOfARectangle />
</Section>
<Section Title="Area of a Circle">
    <Text>
        In this challenge you will calculate the area of a circle. The area of the circle tells us how much room there is
        within the circle.
    </Text>
    <Text>
        To calculate the area of a circle you need to multiply pi by the circle's radius squared. Don't let this scare you though,
        what this means is that you have to multiply the distance from one side of the circle to the middle of the circle by
        itself and then multiply by pi. The equation looks like this: <Code>3.14159265359 * radius * radius</Code>.
    </Text>
    <Text>
        Take note that in this section we are using <Code>floats</Code> rather than integers! So you'll need to be sure to use the
        right data type and format it correctly when you are creating a float!
    </Text>
    <AreaOfACircle />
</Section>
    <Text>
        In this challenge, you will update your Circle Analyzer program to calculate how fast the Flash can run around the Earth.
        To do this, you will need to determine the circumference of the Earth and the speed at which the Flash can run.
    </Text>
<Section Title="How Fast is the Flash">
    <HowFastIsTheFlash />
</Section>


@code {
    private string Title {get; set;} = "Gauntlet: Shape Analyzers";

    private void UpdateTitle() {
        Title = "Gauntlet: Shape Analyzers <span class=\"fade-in\">... of <span style=\"color: red \">DOOM</span>!</span>";
        StateHasChanged();
    }

    private void ReverseTitle() {
        Title = "Gauntlet: Shape Analyzers";
        StateHasChanged();
    }

    public static readonly PageRef PageRef = new PageRef("Gauntlet: Shape Analyzers", "/activities/shape-analyzers", 3, "Activities");
}