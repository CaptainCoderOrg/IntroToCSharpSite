@page "/activities/two-truths-and-a-lie"
@using IntroToCSharp.Shared.Components.ReplIt
<h1>Two Truths and a Lie</h1>
<Section Title="Overview">
    <p>
        Two Truths and a Lie is a simple game in which you test how well your peers 
        know you. You start by thinking of two things about yourself that are true
        and a third thing that is not true. Then, you say those three things to
        your peers in any order. Finally, your peers try to guess which of the items
        is a lie.
    </p>
    <p>
        In this activity, you will write a simple program which outputs two truths
        and a lie about yourself. Then, you will share your program with your peers
        and see who can guess your lie!
    </p>
</Section>
<Section Title="Learning Objectives">
    <MudList Clickable="true">
        <MudListItem Icon="@Icons.Filled.Circle">Learn the difference between a program and a programming language</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to "talk" with the computer using a console</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to create a new console C# project using the .NET CLI</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to compile and run a console C# project using the .NET CLI</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">
            Learn how to use the <code>Console.WriteLine</code> method to
            display text in the terminal
        </MudListItem>
    </MudList>
</Section>

<Questions Title="Pre-Knowledge Check">
    <Message>
        Next, let's do a quick knowledge check to see what we already know and 
        where we have room to learn and grow. Don't be tempted to peek ahead at 
        the answers. It is okay if you don't know the answer yet. The goal here 
        is to see what knowledge we already have.
    </Message>
    <ChildContent>
        <Question Text="What is a program?" />
        <Question Text="What is a programming language?" />
        <Question Text="What is a console?" />
        <Question Text="What is .NET?" />
        <Question Text="What is a statement?" />
    </ChildContent>
</Questions>

<Section Title="Say Hello World">
    <p>
        A computer is a machine that is very good at following instructions 
        exactly as specified. A <Keyword Word="program"/> is a set of 
        instructions that a computer can follow to perform a task. 
        These instructions are defined using <b><i>only</i></b> numbers! This is because 
        the "brain" of a computer can only read numbers. Below is an actual 
        set of computer instructions that, when executed, displays 
        "Hello World!"" to the screen.
    </p>
    <MudImage 
        Src="imgs/activities/two-truths-and-a-lie/helloprogram.png"
        Alt="An image of a binary Hello World program"
        Class="rounded-lg"
        style="display: block; margin:auto;"
    />
    <p>
        As it turns out, humans are not very good at speaking directly to 
        computers. To help facilitate writing these instructions, we often use 
        something called a <Keyword Word="programming language"/>. A <Keyword Word="programming language"/> 
        can be thought of as a set of vocabulary and grammar that provide rules 
        for instructing a computer to perform a task.
    </p>
    <FunFact>
        The term "computer" once meant "one who computes". Before electronic
        computers were available, a person who was good at performing mathematical
        calculations might have been employed as a "computer". You can read
        more about the computer occupation on Wikipedia: 
        <MudLink 
            Href="https://en.wikipedia.org/wiki/Computer_(occupation)" 
            Target="_blank">Continue Learning</MudLink>
    </FunFact>

    <p>
        C# is a <Keyword Word="programming language"/> that can be translated
        from <Keyword Word="source code"/> to numeric instructions that a
        computer can run. This translation is called <Keyword Word="compilation"/>.
    </p>

    <p>
        Below is a program written in C# that, when executed, displays 
        "Hello World!" to the screen:
    </p>

    <CodeBlock Filename="HelloWorld.cs" />

    <p> 
        As you can see, this is much easier for a human to read and understand
        than the computer instructions. That isn't to say that it makes perfect
        sense just yet but, it at least has words you've seen before.
    </p> s

</Section>

<Section Title="The Console">
    <p>
        Next, let's start by creating a simple program by using the <Keyword Word="console"/>.
        You have most likely heard the word <Keyword Word="console" /> in the
        context of video games. In general, a <Keyword Word="console" /> is
        a device that is used to send data to and receive data from a computer.
        When you use a video game <Keyword Word="console" />, you are sending
        your controller inputs to a computer which interprets them and sends 
        video and audio data to a screen. Throughout this book, we will use
        the term <Keyword Word="console" /> to refer to the console you will 
        use to interact with the computer that is compiling and executing your
        C# code.
    </p>

    <p>
        Below is a Repl.it <Keyword Word="console" /> that is attached to a
        Linux based computer that has .NET installed. Feel free to use this
        <Keyword Word="console" /> for this activity. Just know that when you
        leave this page, your work will not be saved. 

        TODO: Add Fork option
    </p>

</Section>

<Questions Title="First Task">
    <Message>
        The console allows us to interact with the computer by typing in commands.
        Let's try it now. Type in the following commands into your console and
        then take a guess as to what each command does.
    </Message>
    <ChildContent>
        <Question Text="date" />
        <Question Text="echo Hello World" />
        <Question Text="touch NewFile.txt" />
        <Question Text="mkdir NewFolder" />
        <Question Text="go steve go" />
        <Question Text="ls" />
    </ChildContent>
</Questions>
<Section Title="Understanding Commands">
<p>
When you type something into the terminal and press enter, the text you entered 
is sent to your operating system and the operating system tries to figure out 
what to do with it. The first word is typically referred to as a command.
If the operating system finds a program associated with the command,
it runs the program and uses the remaining words as inputs for the command. These
remaining words are referred to as arguments.
</p>
<p>
For example:
<MudList Clickable="true">
    <MudListItem Icon="@Icons.Filled.Circle"><code>date</code> - Executes the date command which displays the current date and time</MudListItem>
    <MudListItem Icon="@Icons.Filled.Circle"><code>echo Hello World</code> - Executes the echo command which displays its arguments (Hello and World)</MudListItem>
    <MudListItem Icon="@Icons.Filled.Circle"><code>touch NewFile.txt</code> - Executes the touch command which creates a file if it does not exist</MudListItem>
    <MudListItem Icon="@Icons.Filled.Circle"><code>mkdir NewFolder</code> - Executes the mkdir command which creates a new folder</MudListItem>
    <MudListItem Icon="@Icons.Filled.Circle"><code>go steve go</code> - Tries to find the go command but fails and reports that no go command exists</MudListItem>
    <MudListItem Icon="@Icons.Filled.Circle"><code>ls</code> - Executes the ls command which lists the files in the current folder</MudListItem>
</MudList>

The touch program creates a new file with the name that was provided.
The date program displays the current date and time
</p>
</Section>

<Section Title="Creating a Project Folder">
    <p>
        Before going further, let's create a folder to store our first project.
        Use the <code>mkdir</code> command to create a folder named TwoTruthsAndALie.
        Notice that I have no spaces in the name. If you put spaces, it will create
        a new folder for each word. Run the command now <code>mkdir TwoTruthsAndALie</code>.
    </p>
    <p>
        Next, we need to move our console into the new folder. You can do this with the
        <code>cd</code> command which "changes directory". Run the command <code>cd TwoTruthsAndALie</code>.
    </p>
    <p>
        Finally, we can verify that our console is in the new directory by using
        the <code>pwd</code> command which will "print the working directory".
        Run the command <code>pwd</code>. If all went well, your workspace 
        should look something like this:
    </p>
    <MudImage 
        Src="imgs/activities/two-truths-and-a-lie/workspace.png"
        Alt="Workspace after creating project"
        Class="rounded-lg"
        style="display: block; margin:auto;"
    />
    <Note>
        The output from your pwd command will likely be different than mine. 
        However, the important thing is that it ends with "TwoTruthsAndALie"
    </Note>
</Section>


<Section Title="Running the .NET CLI">
    <p>
    Now that you know a little bit more about the console, let's try running the .NET CLI.
    CLI stands for Command Line Interface. This refers to a program that can be
    used from the computers command line.
    </p>
    <p>
        If you type <code>dotnet</code> into your console, this tells the operating
        system to run the .NET CLI. Try it now.
    </p>
    <p>
        If all goes well, you should see something that looks like this:
    </p>
    <MudImage 
        Src="imgs/activities/two-truths-and-a-lie/dotnet.png"
        Alt="Output from executing dotnet"
        Class="rounded-lg"
        style="display: block; margin:auto;"
    />
    <p>
        If you see this output, it tells us that the .NET CLI is installed and
        that the command by itself doesn't do much. When executed without any
        arguments, it displays information on how to use it. To create a new
        C# project we can give it 2 arguments: <code>new</code> and <code>console</code>. 
        Let's try it:
    </p>
    <MudCheckBox Checked="false">In the console run: <code>dotnet new console</code></MudCheckBox>

    <p>
        If all goes well, you should see output that looks similar to this:
    </p>

    <MudImage 
        Src="imgs/activities/two-truths-and-a-lie/newconsole.png"
        Alt="Output from executing dotnet new console"
        Class="rounded-lg"
        style="display: block; margin:auto;"
    />
    <p>
        Additionally, you should see that several new files have been created
        within your workspace:
    </p>

    <MudImage 
        Src="imgs/activities/two-truths-and-a-lie/newfiles.png"
        Alt="Output from executing dotnet new console"
        Class="rounded-lg"
        style="display: block; margin:auto;"
    />

    <p>
        These filew are the template files that .NET provides to make it easier
        to start programming in C# right away. You could create these files
        manually and everything would work exactly the same. However, it is such
        a common task that Microsoft provides these templates for developers.
    </p>
    
</Section>

<Section Title="Running Your First Program">
    <p>
        To run a C# project, you use the .NET CLI and provide it with a single
        argument <code>run</code>. Let's try it:
    </p>
    <MudCheckBox Checked="false">In the console run: <code>dotnet run</code></MudCheckBox>
    <p>
        This causes the C# project to be compiled (turned into computer instructions)
        and then executed. If all went well, you should see the following output:
    </p>
    <MudImage 
        Src="imgs/activities/two-truths-and-a-lie/outputhello.png"
        Alt="Output from executing dotnet run"
        Class="rounded-lg"
        style="display: block; margin:auto;"
    />
</Section>

<Section Title="The Program.cs File">
    <p>
        Next, let's take a look at the C# program that we just compiled and 
        executed. In your workspace, open the Program.cs file within your
        TwoTruthsAndALie project.
    </p>
    <MudImage 
        Src="imgs/activities/two-truths-and-a-lie/openprogram.png"
        Alt="Hello World Program"
        Class="rounded-lg"
        style="display: block; margin:auto;"
    />
    <p>
        Notice, this is the source code we saw at the beginning of this activity.
        This program is very simple. It uses the <code>Console.WriteLine</code>
        method to output the text "Hello, World!" to the console and then exits.
    </p>
    <p>
        Let's add a new line to the program to output the text, "This is my first program.".
    </p>
    <MudCheckBox Checked="false">Add the line <code>Console.WriteLine("This is my first progam.");</code></MudCheckBox>
    <MudCheckBox Checked="false">In the console execute <code>dotnet run</code></MudCheckBox>
    <Note>Double quotes should surround the text you want to output and you need to include a semi-colon at the end of the line.</Note>

    <p>
        If all went well, your code and workspace should look like this:
        <MudImage 
        Src="imgs/activities/two-truths-and-a-lie/newline.png"
        Alt="Hello World Program"
        Class="rounded-lg"
        style="display: block; margin:auto;"
    />
    </p>

</Section>

<Section Title="Second Task - Two Truths and a Lie">
    <p>
        Let's practice using <code>Console.WriteLine</code> to output a few more
        lines of text to the console.
    </p>
    <MudCheckBox Checked="false">Write a line of code that displays your name</MudCheckBox>
    <MudCheckBox Checked="false">Write a line of code that displays your <del>address and credit card number</del> favorite food</MudCheckBox>
    <MudCheckBox Checked="false">Write 3 more lines, 2 of the lines should display truths about you and 1 of the lines should be a lie about you.</MudCheckBox>
</Section>

<Questions Title="Post-Knowledge Check">
    <Message>
        Now that you've completed the activity, let's do a quick knowledge check 
        to see what you learned and identify areas where you should review 
        (feel free to look back and find the answers).
    </Message>
    <ChildContent>
        <Question Text="What is a program?" />
        <Question Text="What is a programming language?" />
        <Question Text="What is a console?" />
        <Question Text="What is .NET?" />
        <Question Text="What is a statement?" />
    </ChildContent>
</Questions>