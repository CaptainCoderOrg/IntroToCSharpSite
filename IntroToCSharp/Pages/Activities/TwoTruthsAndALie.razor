@inherits CaptainCoder.Page
@page "/activities/two-truths-and-a-lie"
<Title>Two Truths and a Lie</Title>
<Section Title="Overview">
    <p>
        Two Truths and a Lie is a simple game in which you test how well your peers
        know you. You start by thinking of two things about yourself that are true
        and a third thing that is not true. Then, you say those three things to
        your peers in any order. Finally, your peers try to guess which of the items
        is a lie.
    </p>
    <p>
        In this activity, you will write a simple program which outputs two truths
        and a lie about yourself. Then, you will share your program with your peers
        and see who can guess your lie!
    </p>
</Section>
<Section Title="Learning Objectives">
    <MudList Clickable="true">
        <MudListItem Icon="@Icons.Filled.Circle">Learn the difference between a program and a programming language</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Practice creating and navigating directories</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to create a new console C# project using the .NET CLI</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to compile and run a console C# project using the .NET CLI</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">
            Learn how to use the <Code>Console.WriteLine</Code> method to
            display text in the terminal
        </MudListItem>
    </MudList>
</Section>
<Section Title="Before Starting">
    <p>
        Before starting this activity, you should be familiar with creating
        and navigating directories in the console using the <Code>mkdir</Code>
        and <Code>cd</Code> commands. If you are unfamiliar or would like
        a refresher, check out the
        <MudLink Href="/activities/console-basics">Console Basics</MudLink>
        activity.
    </p>
</Section>

<Questions Title="Pre-Knowledge Check">
    <Message>
        Next, let's do a quick knowledge check to see what we already know and
        where we have room to learn and grow. Don't be tempted to peek ahead at
        the answers. It is okay if you don't know the answer yet. The goal here
        is to see what knowledge we already have.
    </Message>
    <ChildContent>
        <Question Text="What is a program?" />
        <Question Text="What is a programming language?" />
        <Question Text="What is .NET?" />
        <Question Text="What is a statement?" />
    </ChildContent>
</Questions>

<Section Title="Say Hello World">
    <p>
        A computer is a machine that is very good at following instructions
        exactly as specified. A <Keyword Word="program"/> is a set of
        instructions that a computer can follow to perform a task.
        These instructions are defined using <b><i>only</i></b> numbers! This is because
        the "brain" of a computer can only read numbers. Below is an actual
        set of computer instructions that, when executed, displays
        "Hello World!"" to the screen.
    </p>
    <Image Src="helloprogram.png" Alt="An image of a binary Hello World program" />
    <p>
        As it turns out, humans are not very good at speaking directly to
        computers. To help facilitate writing these instructions, we often use
        something called a <Keyword Word="programming language"/>. A <Keyword Word="programming language"/>
        can be thought of as a set of vocabulary and grammar that provide rules
        for instructing a computer to perform a task.
    </p>
    <FunFact>
        The term "computer" once meant "one who computes". Before electronic
        computers were available, a person who was good at performing mathematical
        calculations might have been employed as a "computer". You can read
        more about the computer occupation on Wikipedia:
        <MudLink
            Href="https://en.wikipedia.org/wiki/Computer_(occupation)"
            Target="_blank">Continue Learning</MudLink>
    </FunFact>

    <p>
        C# is a <Keyword Word="programming language"/> that can be translated
        from <Keyword Word="source code"/> to numeric instructions that a
        computer can run. This translation is called <Keyword Word="compilation"/>.
    </p>

    <p>
        Below is a program written in C# that, when executed, displays
        "Hello World!" to the screen:
    </p>

    <CodeBlock Filename="HelloWorld.cs" />

    <p>
        As you can see, this is much easier for a human to read and understand
        than the computer instructions. That isn't to say that it makes perfect
        sense just yet but, it at least has words you've seen before.
    </p>

</Section>

<Section Title="Creating a Project Directory">
    <p>
        Before going further, let's create a directory to store our project.
        Use the <Code>mkdir</Code> command to create a folder named TwoTruthsAndALie.
        Notice that I have no spaces in the name. If you put spaces, it will create
        a new folder for each word. Run the command now <Code>mkdir TwoTruthsAndALie</Code>.
        After you create the directory, navigate into the directory using the <Code>cd</Code>
        command.
    </p>
    <TaskItem Name="mkdir TwoTruthsAndALie">Run <Code>mkdir TwoTruthsAndALie</Code></TaskItem>
    <TaskItem Name="cd TwoTruthsAndALie">Run <Code>cd TwoTruthsAndALie</Code></TaskItem>
    <TaskItem Name="pwd TwoTruthsAndALie">Run <Code>pwd</Code> to verify you're in the correct directory</TaskItem>
</Section>


<Section Title="Running the .NET CLI">
    <p>
    Next, let's try running the .NET CLI.
    CLI stands for Command Line Interface. This refers to a program that can be
    used from the computers command line (or command prompt).
    </p>
    <TaskItem Name="dotnet">Run <Code>dotnet</Code> to try the .NET CLI</TaskItem>
    <p>
        If all goes well, you should see something that looks like this:
    </p>
    <Image Src="dotnet.png" Alt="Output from executing dotnet" />
    <p>
        If you see this output, it tells us that the .NET CLI is installed and
        that the command by itself doesn't do much. When executed without any
        arguments, it displays information on how to use it. To create a new
        C# project we can give it 2 arguments: <Code>new</Code> and <Code>console</Code>.
        Let's try it:
    </p>
    <TaskItem Name="Run new Console">Run <Code>dotnet new console</Code></TaskItem>

    <p>
        After a few moments, you should see the following output:
    </p>

    <Image Src="newconsole.png" Alt="Output from executing dotnet new console" />
    <p>
        Additionally, you should see that several new files have been created
        within your workspace:
    </p>

    <Image Src="newfiles.png" Alt="Output from executing dotnet new console" />
    <p>
        These filew are the template files that .NET provides to make it easier
        to start programming in C# right away. You could create these files
        manually and everything would work exactly the same. However, it is such
        a common task that Microsoft provides these templates for developers.
    </p>

</Section>

<Section Title="Running Your First Program">
    <p>
        To run a C# project, you use the .NET CLI and provide it with a single
        argument <Code>run</Code>. Let's try it:
    </p>
    <TaskList Name="Run First Program">
         <TaskItem Name="Dot Net Run">Run: <Code>dotnet run</Code></TaskItem>
    </TaskList>
    <p>
        This causes the C# project to be compiled (turned into computer instructions)
        and then executed. If all went well, you should see the following output:
    </p>
    <Image Src="outputhello.png" Alt="Output from executing dotnet run" />
</Section>

<Section Title="The Program.cs File">
    <p>
        Next, let's take a look at the C# program that we just compiled and
        executed. In your workspace, open the Program.cs file within your
        TwoTruthsAndALie project.
    </p>
    <Image Src="openprogram.png" Alt="Hello World Program" />
    <p>
        Notice, this is the source code we saw at the beginning of this activity.
        This program is very simple. It uses the <Code>Console.WriteLine</Code>
        method to output the text "Hello, World!" to the console and then exits.
    </p>
    <p>
        This line of code is called a <Keyword Word="statement"/>. A <Keyword Word="statement"/> is
        a piece of code (usually a single line) which describes an action to be carried out. In C#,
        the majority of statements end with a semi-colon (;). However, it should be noted that not all
        statements end with a semi-colon.
    </p>
    <p>
        Next, let's add a new statement to the program to output the text, "This is my first program.".
    </p>
    <TaskList Name="First Program">
        <TaskItem Name="WriteLine">Add the statement <Code>Console.WriteLine("This is my first progam.");</Code></TaskItem>
        <TaskItem Name="ExecuteProgram">In the console execute <Code>dotnet run</Code></TaskItem>
    </TaskList>
    <Note>Double quotes should surround the text you want to output and you need to include a semi-colon at the end of the line.</Note>

    <p>
        If all went well, your code and workspace should look like this:
        <Image Src="newline.png" Alt="Hello World Program" />
    </p>

</Section>

<Section Title="First Program - Two Truths and a Lie">
    <p>
        Let's practice using <Code>Console.WriteLine</Code> to output a few more
        lines of text to the console.
    </p>
    <TaskList Name="Two Truths and a Lie">
        <TaskItem Name="Display Name">Write a statement that displays your name</TaskItem>
        <TaskItem Name="Display Food" >Write a statement that displays your <del>address and credit card number</del> favorite food</TaskItem>
        <TaskItem Name="TruthsAndLie">Write 3 more statements, 2 of the statements should display truths about you and 1 of the statements should be a lie about you.</TaskItem>
    </TaskList>
</Section>

<Questions Title="Post-Knowledge Check">
    <Message>
        Now that you have completed the activity, let's do a quick knowledge check
        to see what you have learned and identify areas where you should review
        (feel free to look back and find the answers).
    </Message>
    <ChildContent>
        <Question Text="What is a program?" />
        <Question Text="What is a programming language?" />
        <Question Text="What is .NET?" />
        <Question Text="What is a statement?" />
    </ChildContent>
</Questions>