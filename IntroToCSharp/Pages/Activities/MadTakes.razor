@inherits CaptainCoder.Page
@page "/activities/mad-takes"
<Title>Mad Takes</Title>
<Section Title="Overview">
    <p>
        Mad Takes is a silly word game in which the players are asked to 
        provide words that will be used to fill in missing words from a story (or other document).
        Here's the catch: The players are not allowed to see the story before providing words
        to fill in the blank! This can often result in a non-sensicle outcome.
        I've written a simple Mad Take program in C#, you can play a Mad Take in the console below:
    </p>
    <ReplIt Path="JosephCollard/MadTakes"/>
</Section>
<Section Title="Learning Objectives">
    <MudList Clickable="true">
        <MudListItem Icon="@Icons.Filled.Circle">Practice creating a new C# project using the console</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Practice using the Console.WriteLine method to display output to the user</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn about the string data type</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to declate a string variable</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to use the assignment operator to store data in a variable</MudListItem>
        <MudListItem Icon="@Icons.Filled.Circle">Learn how to use the Console.ReadLine method to read user input from the console</MudListItem>
    </MudList>
</Section>
<Section Title="Before Starting">
    <p>
        Before starting this activity, you should be familiar with creating
        a C# project using the .NET CLI and feel comfortable using the 
        Console.WriteLine method to display message to the console.
    </p>
    <p>
        If you need a refresher, check out the 
        <MudLink Href="/activities/two-truths-and-a-lie">
            Two Truths and a Lie
        </MudLink> 
        activity which covers these topics.
    </p>
</Section>

<Questions Title="Pre-Knowledge Check">
    <Message>
        Next, let's do a quick knowledge check to see what we already know and
        where we have room to learn and grow. Don't be tempted to peek ahead at
        the answers. It is okay if you don't know the answer yet. The goal here
        is to see what knowledge we already have.
    </Message>
    <ChildContent>
        <Question Text="What is a method?" />
        <Question Text="What is a variable?" />
        <Question Text="What does it mean to declare a variable?"/>
        <Question Text="In C#, what is required to declare a variable?"/>
        <Question Text="What is a string?" />
    </ChildContent>
</Questions>

<Section Title="Getting Started">
    <p>
        Before starting this activity, you should have access to a Linux based
        console that has the .NET 6 CLI available. 
        If you have a Replit account, you can fork this 
        <ReplitLink Path="JosephCollard/C-Project">C# Project</ReplitLink>
        which is configured specifically for this activity. If you need
        a refresher for forking / connecting a Replit project to this book,
        you can follow the instruction here: 
        <MudLink Href="getting-started/replit-console">LINK</MudLink>.
    </p>

    <TaskList Name="GettingStarted">
        <TaskItem Name="Create Project">Next, we need to make a C# project. To do this, run <Code>dotnet new console</Code> in the console.</TaskItem>
        <TaskItem Name="Open Program">Open Program.cs</TaskItem>
    </TaskList>

    <p>
        If all went well, your workspace should look similar to this:
         <Image Src="init-project.png" Alt="An image showing the project initialized" />
    </p>
    
</Section>
<Section Title="Basic User Input">
    <p>
        In the <MudLink Href="/activities/two-truths-and-a-lie">Two Truths and a Lie</MudLink>
        activity, you created a program that, when executed, will always produce the same output.
        In many ways, this isn't particularly useful or interesting. Most programs expect a 
        user to provide input, perform a task with that input, and produce an output. For
        example, the Mad Take above accepted 4 inputs from the user and, using that input,
        produced a silly song.
    </p>
    <p>
        A <Keyword Word="method"/> is a reusable piece of code that can be used to perform a task. C# provides 
        many built in <Keyword Word="method"/>s that can be used to accomplish a variet of tasks. When we
        use a method, we say that we are "calling" the method.
        In C#, we can write text output to the console by calling the <Keyword Word="Console.WriteLine"/> method.
        Similarly, we can read text input from the console by calling the <Keyword Word="Console.ReadLine" /> method.
        The code example below demonstrates a simple C# program which prompts the user to enter their name.
    </p>
    <TaskList Name="AskName">
        <TaskItem Name="copy-code">Update your Program.cs file to match the code below</TaskItem>
        <TaskItem Name="run">Run your program</TaskItem>
        <TaskItem Name="name">Enter your name and press enter</TaskItem>
    </TaskList>
    <CodeBlock Filename="MadTakes/AskName1.cs" />

    <p>
        If all went well, your output should look similar to this:
         <Image Src="proj-run.png" Alt="An image showing the programs output" />
    </p>
    <p>
        When you run your program, it executes each statement in order from top to bottom. When it encounters the 
        <Keyword Word="Console.ReadLine"/> method, it will suspend execution and wait for the user
        to type something into the console before continuing to execute.
    </p>
    <Note>
        You will notice that when you run your program, the user's input appears below the "Enter your name:" message. 
        If you would like to have the user's input appear at the end of the line, after the colon, you can use the <Keyword Word="Console.Write" />
        method instead of the <Keyword Word="Console.WriteLine" /> method. The code example below shows this change.
    </Note>
    <CodeBlock Filename="MadTakes/AskName2.cs" />
</Section>
<Section Title="Declaring Variables">
    <p>
        Currently, your program displays, "Enter your name: ". It waits for the user to enter text and 
        press enter. Then, it exits. This isn't particularly useful because we are not able to use the
        user's input to do anything.
    </p>
    <p>
        To save the user's input, we first need to create space to store the input. To do this, we will
        <Keyword Word="declare" /> a <Keyword Word="variable"/>. A <Keyword Word="variable"/> is a 
        named location in memory where we can store data.
    </p>
    <TaskList Name="Declare Variable">
        <TaskItem Name="declare-string">
            Update your program to declare a string variable named <Code>userName</Code>
        </TaskItem>
    </TaskList>

    <CodeBlock Filename="MadTakes/AskName3.cs" />

    <p>
        To make space to store data in C#, we must <Keyword Word="declare"/> two things: 
        <MudList Clickable="true">
            <MudListItem Icon="@Icons.Filled.Circle">1. The type of data to store (in this case a string)</MudListItem>
            <MudListItem Icon="@Icons.Filled.Circle">2. The name of the <Keyword Word="variable" /> (in this case userName)</MudListItem>
        </MudList>
        In the example above, we declare a 
        <Keyword Word="string"/> <Keyword Word="variable"/> named <Code>userName</Code>. A <Keyword Word="string"/> is a data
        type which stores text.
    </p>
</Section>
<Section Title="Storing Data in a Variable">
    <p>
        Now that we have space to store the users input, we can use the <Keyword Word="assignment operator"/> (=)
        to set the data that is stored in the <Code>userName</Code> variable.
    </p>
    <TaskList Name="Assignment">
        <TaskItem Name="assign-value">
            Update your program to assign the users response to be stored in the <Code>userName</Code> variable
        </TaskItem>
    </TaskList>

    <CodeBlock Filename="MadTakes/AskName4.cs" />
    <p>
        The code <Keyword Word="Console.ReadLine()"/> is an expression that, when evaluated, suspends
        the program and waits until the user enters text and presses enter. Then, the entered text is
        substituted into the program and the program continues to execute. 
        When the <Keyword Word="statement"/> <Code>userName = Console.ReadLine();</Code> is executed 
        the <Keyword Word="expression"/> on the right side of the assignment operator is <Keyword Word="evaluated"/> 
        then that value is stored in the location of the <Code>userName</Code> variable.
    </p>
</Section>
<Section Title="Retrieving Data From a Variable">
    <p>
        After data has been stored in a variable, you can access it by using the variables name.
    </p>

    <TaskList Name="Retrieve">
        <TaskItem Name="retrieve-value">
            Update your program to display "Nice to meet you," + userName + "!"
        </TaskItem>
        <TaskItem Name="run-code">
            Run your updated program.
        </TaskItem>
    </TaskList>

    <CodeBlock Filename="MadTakes/AskName5.cs" />
    <p>
        If all went well, your output should look like this:
        <Image Src="output.png" />

    </p>
    <ThinkAboutIt>
        <p>
            Answer this question without updating or running the code.
        </p>
        <Question Text="@NiceToMeetYou" />
    </ThinkAboutIt>
    <p>
        Now, try updating your code to add a space: <Code>"Nice to meet you, "</Code>.
        </p>
        <TaskList Name="TryIt">
            <TaskItem Name="nospace">
                Update your program to display "Nice to meet you, " + userName + "!"
            </TaskItem>
            <TaskItem Name="run-code">
                Run your updated program.
            </TaskItem>
        </TaskList>
</Section>

<Questions Title="Post-Knowledge Check">
    <Message>
        Now that you've completed the activity, let's do a quick knowledge check
        to see what you learned and identify areas where you should review
        (feel free to look back and find the answers).
    </Message>
    <ChildContent>
        <Question Text="What is a method?" />
        <Question Text="What is a variable?" />
        <Question Text="What does it mean to declare a variable?"/>
        <Question Text="In C#, what is required to declare a variable?"/>
        <Question Text="What is a string?" />
    </ChildContent>
</Questions>

<Section Title="Challenge 1: Short Mad Take">
    <p>
        Now that you know the basics for reading user input and storing it in a variable,
        you will write a short Mad Take program which accepts two inputs from the user: a noun
        and an adjective. Then, it displays the output to the user. Below is a simple program
        you can use to help get started:
    </p>
    <CodeBlock Filename="MadTakes/Starter.cs" />
</Section>

<Section Title="Challenge 2: Full Mad Take">
    <p>
        In this challenge you will create a longer Mad Take program. Come up with your own
        Mad Take or find one here: <MudLink Href="https://www.madtakes.com/" Target="_blank">https://www.madtakes.com/</MudLink>.
    </p>
    <TaskList Name="Mad Take">
        <TaskItem Name="Fork">Create a **NEW** C Sharp project. You may need to fork a new Replit.</TaskItem>
        <TaskItem Name="RunNewConsole">Run <Code>dotnet new console</Code></TaskItem>
        <TaskItem Name="Display Welcome">Display "Welcome to Mad Takes!"</TaskItem>
        <TaskItem Name="Declare 8 variables">Declare at least 8 variables</TaskItem>
        <TaskItem Name="Read Input">For each variable, prompt the user to enter a value and use <Code>Console.ReadLine()</Code> to get input.</TaskItem>
        <TaskItem Name="Output">Output each sentence in your Mad Take on a separate line using <Code>Console.WriteLine</Code>.</TaskItem>
        <TaskItem Name="Share">Share your Mad Take with a friend!</TaskItem>
    </TaskList>
</Section>

@code
{
    private string NiceToMeetYou = "Why does the userName appear directly after the comma?";
}