@inherits CaptainCoder.Page
@page "/journal/journal-entries"
@inject IDialogService DialogService

<MudPaper align-center>
    <MudDatePicker Label="Journal Date" @bind-Date="date" Color="Color.Success" Elevation="12"/>

    <Section Title="To Do List">
    <MudList>
        @foreach(JournalItem item in JournalItems) {
            <MudCheckBox @onclick="@(() => ToggleJournalItem(item))" Checked="@item.Checked" Label="@item.Text" />
            <MudIconButton @onclick="@(() => DeleteJournalItem(item))"  Variant="Variant.Outlined" Color="Color.Secondary" Icon="@Icons.Filled.Delete" Size=Size.Small/>
        }
    </MudList>
    
     <MudButton StartIcon="@Icons.Material.Filled.AlarmAdd" IconColor="Color.Warning" @onclick="AddJournalItem">Add To Do Item</MudButton>
    </Section>

    @if(IsEverythingCompleted)
    {
        <MudPaper>
            <MudTextField @bind-Value="stringTime" Label="Filled" Variant="Variant.Filled"></MudTextField>
        </MudPaper> 
    }

    @if((!IsJournalSubmitted || !IsProjectSubmitted) || IsEverythingCompleted){
    
    <Section Title = "Journal Entry">
    <MudTextField T="string" @bind-Value="JournalEntryText" Label="Today I am going to..." Variant="Variant.Text"  ReadOnly="@_isReadOnly" Lines="5" />
        @if (!IsJournalSubmitted)
        {
            <MudButton OnClick="@SubmitJournal"> Submit Journal </MudButton>
        }
        @if(IsJournalSubmitted)
        {
            <MudButton OnClick="@EditJournal"> Edit Journal </MudButton>
        }
    </Section>


    <Section Title = "Project Entry">
    <MudTextField @bind-Value="ProjectEntryText" T="string" Label="Today my project is..." Variant="Variant.Text"  ReadOnly="@_isProjectReadOnly" Lines="5" />
    <MudPaper Class="d-flex align-baseline flex-grow-1 gap-4" Elevation="0">
    <MudNumericField @bind-Value="DoubleValue" Label="And I will work on it for..." Variant="Variant.Text" ReadOnly="@_isProjectReadOnly" Min="0.0" />
    <MudSelect T="string" @bind-Value="ListText" AnchorOrigin="Origin.BottomCenter" ReadOnly="@_isProjectReadOnly">
    <MudSelectItem Value="@("Hour(s)")" />
    <MudSelectItem Value="@("Minute(s)")" />
    </MudSelect>
    </MudPaper>
        @if (!IsProjectSubmitted)
        {
            <MudButton OnClick="@SubmitProject"> Submit </MudButton>
        }
        @if(IsProjectSubmitted)
        {
            <MudButton OnClick="@EditProject"> Edit Project </MudButton>
        }
    </Section>
    }
    </MudPaper>



    <MudPaper>
    @if((IsJournalSubmitted && IsProjectSubmitted) || IsEverythingCompleted)
    {
    <Section Title = "Reflection Entry">
    <MudTextField T="string" @bind-Value="ReflectionEntryText" Label="Today I was confused about..." Variant="Variant.Text"  ReadOnly="@_isReflectionReadOnly" Lines="5" />
    </Section>

    @if(!IsReflectionSubmitted)
    {
        <MudButton OnClick="@SubmitReflection"> Submit </MudButton>
    }
    @if(IsReflectionSubmitted)
    {
        <MudButton OnClick="@EditReflection"> Edit Reflection </MudButton>
    }
    }
    </MudPaper>

    <Section Title="Danger Zone">
    <MudPaper Class="d-flex align-content-start flex-wrap flex-grow-1 gap-4 pa-3">
        <MudButton Variant="Variant.Filled" OnClick="@TimerReset" StartIcon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Warning">Reset Timer</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="@JournalReset" StartIcon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Warning">Reset Journal Entry</MudButton>
    </MudPaper>
    </Section>


@code{
    private List<JournalItem> JournalItems = new();
    
    public string? ToDoItem {get; set; }
    public string JournalEntryText {get; set;} = String.Empty;
    public string ProjectEntryText {get; set;} = String.Empty;
    public string ReflectionEntryText {get; set;} = String.Empty;
    public string ListText {get; set;} = String.Empty;
    public bool Gutters {get; set;} = false;
    public bool IsJournalSubmitted {get; set;} = false;
    public bool IsProjectSubmitted {get; set;} = false;
    public bool IsReflectionSubmitted {get; set; } = false;
    public bool IsEverythingCompleted = false;
    private bool _isReadOnly = false;
    private bool _isProjectReadOnly = false;
    private bool _isReflectionReadOnly = false;
    public bool IsTimerGoing = false;
    public bool Todo {get; set;}
    public double DoubleValue { get; set; }
    DateTime? date = DateTime.Today;

    public DateTime startTime;
    public DateTime elapsedTime;
    public TimeSpan totalTime;
    public string? stringTime;


    public void SubmitJournal()
    {
        IsJournalSubmitted = true;
        _isReadOnly = true;

        if(!IsEverythingCompleted)
        {
            TimerController();
        }
    }

        public void SubmitProject()
    {
        IsProjectSubmitted = true;
        _isProjectReadOnly = true;

    }
        public void SubmitReflection()
    {
        IsReflectionSubmitted = true;
        _isReflectionReadOnly = true;
        IsEverythingCompleted = true;

        TimerController();
    }
    public void EditJournal()
    {
        _isReadOnly = false;
        IsJournalSubmitted = false;
    }
        public void EditProject()
    {
        _isProjectReadOnly = false;
        IsProjectSubmitted = false;
    }
    public void EditReflection()
    {
        _isReflectionReadOnly = false;
        IsReflectionSubmitted = false;
    }

    public void TimerController()
    {
        if(!IsTimerGoing)
        {
            startTime = DateTime.UtcNow;
            IsTimerGoing = true;
        }
        else if(IsTimerGoing)
        {
        elapsedTime = DateTime.UtcNow;
        totalTime = elapsedTime.Subtract(startTime);
        stringTime = totalTime.ToString(@"hh\:mm\:ss");
        }
    }

    public void TimerReset()
    {
        startTime = DateTime.UtcNow;        
        elapsedTime = DateTime.UtcNow;
        totalTime = elapsedTime.Subtract(startTime);
        stringTime = totalTime.ToString(@"hh\:mm\:ss");
    }

    public void JournalReset()
    {
        @* Apparently this doesn't control the message prompt *@
        YesNoDialog.Show(DialogService, "", DoJournalReset);
    }
    private void DoJournalReset() {

        _isReadOnly = false;
        _isProjectReadOnly = false;
        _isReflectionReadOnly = false;
        IsJournalSubmitted = false;
        IsProjectSubmitted = false;
        IsReflectionSubmitted = false;
        IsEverythingCompleted = false;
        JournalEntryText = String.Empty;
        ProjectEntryText = String.Empty;
        ReflectionEntryText = String.Empty;
        ListText = String.Empty;
        DoubleValue = 0;

        StateHasChanged();
    }

    DialogOptions topCenter = new DialogOptions() { Position = DialogPosition.TopCenter };
    public void AddJournalItem()
    {

        @* Can't seem to figure out how to get the TextValue from the dialogue box? *@
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogParameters parameters = new DialogParameters();
        parameters.Add("JournalItems", JournalItems);
        DialogService.Show<JournalEntryDialog>("Add Journal Entry", parameters, closeOnEscapeKey);
        // TODO: State Changed
    }

    public void ToggleJournalItem(JournalItem item)
    {
        item.Checked = !item.Checked;
        StateHasChanged();
    }
        public void DeleteJournalItem(JournalItem item)
    {
        JournalItems.Remove(item);
        StateHasChanged();
    }
}