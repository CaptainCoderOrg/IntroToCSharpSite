@inject IDialogService DialogService
<MudGrid Spacing=2 Justify="Justify.Center" Class="@($"my-2 {ReverseClass}")">
    <MudItem xs=4 sm=3>
            <MudImage Class="rounded-lg pt-2" Style="width:100%; max-width:200px; border: 2px solid var(--mud-palette-dark); background-image: url('/imgs/portraits/background.png');" Src="@($"/imgs/portraits/{Portrait.Src}")" />
    </MudItem>
    <MudItem xs=12 sm=9>
        <MudStack>
            <MudPaper Class="pa-2" Style="background: var(--mud-palette-background-grey); color: var(--mud-palette-grey-default);">
                <CascadingValue Value="@this">
                    <CascadingValue Value="@_ix">
                            @CurrentFragment
                    </CascadingValue>
                </CascadingValue>
            </MudPaper>
            @if (Page != null) {
                @if (!IsAdded) {
                    <MudButton Class="fade-in" StartIcon="@Icons.Filled.Hiking" Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddPage">
                        Add "@Page?.Name" to Book
                    </MudButton>
                } else {
                    <MudButton Class="fade-in" StartIcon="@Icons.Filled.Hiking" Variant="Variant.Filled" Color="Color.Primary" Href="@Page?.Href">
                        Go to "@Page?.Name"
                    </MudButton>
                }
            }
            @if (_fragments.Count > 1)
            {
                <MudItem>
                    <MudStack Row=true>
                        <MudButton Disabled="@IsFirst" Class="flex-1" Color="Color.Primary" Variant="Variant.Filled" OnClick="@Back">Back</MudButton>
                        <MudButton Disabled="@IsLast" Class="flex-1" Color="Color.Secondary" Variant="Variant.Filled" OnClick="@Next">Next</MudButton>
                    </MudStack>
                </MudItem>
            }
        </MudStack>
    </MudItem>
</MudGrid>


@code {
    [Parameter, EditorRequired]
    public Portrait Portrait { get; set; }
    [Parameter]
    public bool RightPortrait { get; set; } = false;
    [Parameter, EditorRequired]
    public RenderFragment Item { set => _fragments.Add(value); }

    private OrderedSet<AdventureDialog> _dialogs = new ();
    private OrderedSet<RenderFragment> _fragments = new ();
    private RenderFragment CurrentFragment => _fragments[_ix];
    private PageRef? Page => _ix < _dialogs.Count ? _dialogs[_ix].Page : null;
    private UserPages _userPages = UserPages.Default;
    private string ReverseClass => RightPortrait ? "flex-row-reverse" : "";
    private bool _isLoggedIn = false;
    private bool IsAdded => (_ix < _dialogs.Count && _dialogs[_ix].IsAdded) || (Page == null ? false : _userPages.Contains((PageRef)Page));
    private bool IsFirst => _ix == 0;
    private bool IsLast => _ix == this._fragments.Count-1;
    private int _ix = 0;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserService.Service.OnUserChange += OnUserChange;
    }

    private void OnUserChange(User? newUser)
    {
        if (newUser == null || !newUser.IsLoggedIn || newUser.UserPagesRef == null)
        {
            _isLoggedIn = false;
            UpdatePages(UserPages.Default);
            return;
        }
        _isLoggedIn = true;
        newUser.UserPagesRef.DataChangedEvent += OnPagesChanged;
    }

    private void OnPagesChanged(UserPages? newPages) => UpdatePages(newPages ?? UserPages.Default);

    private void UpdatePages(UserPages newPages) {
        this._userPages = newPages;
        StateHasChanged();
    }
    private void AddPage() {
        if (!_isLoggedIn)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
            var parameters = new DialogParameters();
            parameters.Add("Page", _dialogs[_ix].Page);
            DialogService.Show<LoginDialog>("Adventure Mode", parameters, options);
            return;
        }
        if (Page != null) UserService.Service.AddPage((PageRef)Page);
    }

    public void SetDialog(AdventureDialog dialog, int ix){
        if (this._dialogs.Count > ix) return;
        this._dialogs.Add(dialog);
        StateHasChanged();
    }

    private void SetIX(int ix) {
        this._ix = Math.Clamp(ix, 0, _fragments.Count-1);
        StateHasChanged();
    }

    public void Next() => SetIX(this._ix + 1);
    public void Back() => SetIX(this._ix - 1);

}