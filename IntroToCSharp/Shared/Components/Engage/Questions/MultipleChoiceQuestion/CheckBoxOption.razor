@inject NavigationManager NavigationManager

<MudElement Class="pa-0 d-flex align-content-center rounded" Style="@Style">
    @if(this.Parent.IsMultiSelect) {
        <MudCheckBox Disabled="@IsSubmitted" @bind-Checked="@IsChecked"><MudText Style="@Color">@Text</MudText></MudCheckBox>
    } else {
        <MudRadio Disabled="@IsSubmitted" Option="@Text"><MudText Style="@Color">@Text</MudText></MudRadio>
    }
</MudElement>

@code {
    [Parameter]
    public string Text { get; set; } = String.Empty;
    [Parameter]
    public bool IsCorrect { get; set; }
    [Parameter]
    public bool IsChecked { get; set; } = false;
    [CascadingParameter]
    public MultipleChoiceQuestion Parent { get; set; } = null!;
    private bool IsSubmitted { get; set; } = false;
    private bool IsSubmissionCorrect => (this.IsChecked && this.IsCorrect) || (!this.IsChecked && !this.IsCorrect);

    private Palette _palette = Themes.s_CSharpTheme.Palette;
    private bool IsHighlighted => (this.IsSubmitted && this.IsChecked);
    private MudBlazor.Utilities.MudColor CorrectHighlight => _palette.Success;
    private MudBlazor.Utilities.MudColor IncorrectHighlight => _palette.Error;
    private MudBlazor.Utilities.MudColor Highlight => this.IsCorrect ? CorrectHighlight : IncorrectHighlight;
    private MudBlazor.Utilities.MudColor CorrectColor => _palette.SuccessContrastText;
    private MudBlazor.Utilities.MudColor IncorrectColor => _palette.ErrorContrastText;
    private MudBlazor.Utilities.MudColor HighlightColor => this.IsCorrect ? CorrectColor : IncorrectColor;
    private MudBlazor.Utilities.MudColor TextColor => this.IsHighlighted ? HighlightColor : _palette.TextPrimary;
    private string Background => this.IsHighlighted ? $"background: {Highlight.ToString()};" : string.Empty;
    private string Color => $"color: {TextColor.ToString()};";
    private string Style => $"{Background} {Color}";

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        this.Parent?.AddOption(this);
        var mainLayout = await MainLayout.GetInstance();
        mainLayout.OnPaletteChange += (palette) => _palette = palette;
    }

    public void Reset()
    {
        this.IsChecked = false;
        this.IsSubmitted = false;
        this.StateHasChanged();
    }
    public bool CheckAnswer()
    {
        this.IsSubmitted = true;
        return IsSubmissionCorrect;
    }

    public void SetIsChecked(bool check) {
        this.IsChecked = check;
    } 
}