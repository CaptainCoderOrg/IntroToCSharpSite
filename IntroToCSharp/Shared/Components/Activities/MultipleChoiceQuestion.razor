@inject NavigationManager NavigationManager

<MudPaper Class="@Class" Elevation="5">
    <MudText Typo="Typo.h6">@Question @Award</MudText>
    <MudRadioGroup @bind-SelectedOption="@SelectedOption">
        <MudStack Class="mt-4">
            <CascadingValue Value="@this">
                @ChildContent
            </CascadingValue>
        </MudStack>
    </MudRadioGroup>

    @if (!_isSubmitted)
    {
        <MudButton Class="mt-4" OnClick="@Submit" Variant="Variant.Filled" Color="Color.Success">Submit</MudButton>
    }
    else
    {
        @if (_isWrong)
        {
            <MudText Class="mt-4">Your answer is incorrect.</MudText>
            <MudButton Class="mt-4" OnClick="@Reset" Variant="Variant.Filled" Color="Color.Error">Try Again</MudButton>
            <MudButton Class="mt-4" OnClick="@ShowAnswer" Variant="Variant.Filled" Color="Color.Warning">Show Answer</MudButton>
        }
        else
        {
            @if (!Explanation.Equals(""))
            {
                <MudExpansionPanels Class="mt-4">
                    <MudExpansionPanel Class="pl-4 pr-4" Style="@ExplanationStyle">
                        <TitleContent>
                            <MudText Typo="Typo.h5">Explanation</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudText Class="mt-4 pb-4">@Explanation</MudText>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }

        }

    }
</MudPaper>

@code {
    /// <summary>
    /// Specifies if this question uses CheckBoxes (true) or RadioButtons (false). The
    /// default behavior is RadioButtons (false).
    /// </summary>
    /// <value></value>
    [Parameter]
    public bool IsMultiSelect { get; set; } = false;

    [Parameter]
    public string Question { get; set; } = "Undefined";

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;
    [Parameter]
    public int XP { get; set; } = 30;
    [Parameter]
    public string Class {get; set; } = "mt-4 pa-4";
    public int Award => _attempts >= 0 ? Math.Max(5, (XP / (_attempts+1))*5) : 0;
    

    /// <summary>
    /// This is the explanation that appears after the user submits the question.
    /// If no explanation is given, no Explanation box appears after submission.
    /// </summary>
    /// <value></value>
    [Parameter]
    public string Explanation { get; set; } = "";

    private string SelectedOption { get; set; }
    private bool _isSubmitted = false;
    private bool _isWrong = false;
    private int _attempts = 0;

    private string ExplanationStyle = $"background: #ffffe3; color: {Themes.s_CSharpTheme.Palette.Black.ToString()};";

    private List<CheckBoxOption> _options = new List<CheckBoxOption>();
    private string Path => $"{NavigationManager.GetRoute()}/questions/{Question}";
    private DataReference<MultipleChoiceQuestionData>? _dataReference;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserService.Service.OnUserChange += HandleUserChange;
    }

    private void HandleUserChange(User userData)
    {
        if (userData.IsLoggedIn)
        {
            _dataReference = UserService.Service.GetJsonDataReference<MultipleChoiceQuestionData>(Path, Question);
            _dataReference.DataChangedEvent += HandleDataChanged;
        }
        else
        {
            this._attempts = 0;
            this.Reset();
        }
    }

    private void HandleDataChanged(MultipleChoiceQuestionData newData)
    {
        _options.ForEach(o => o.IsChecked = newData.Answers.Contains(o.Text));
        this.SelectedOption = newData.Answers.Count() > 0 ? newData.Answers[0] : "";
        this._isSubmitted = newData.IsSubmitted;
        this._attempts = newData.Attempts;
        this.LoadSubmit();
        this.StateHasChanged();
    }

    private void LoadSubmit()
    {
        if (!this._isSubmitted)
        {
            this.Reset();
        }
        if (!IsMultiSelect)
        {
            this._options.ForEach(option => option.IsChecked = this.SelectedOption == option.Text);
        }
        _isWrong = this._options.Where(option => !option.CheckAnswer()).Count() > 0;
    }

    private void Submit()
    {
        // if the user hasn't selected "show answer", then...
        if(this._attempts != -1 ) {
            this._attempts++;
        }
        this._isSubmitted = true;
        LoadSubmit();
        if(this._attempts < 4 && this._attempts != -1 && !_isWrong ) {
            UserService.Service.GiveXP(Award);
        } 
        this.UpdateAndSave();
    }

    /// <summary>
    /// Adds the given CheckBoxOption to this question.
    /// </summary>
    /// <param name="child"></param>
    public void AddOption(CheckBoxOption child) => this._options.Add(child);

    /// <summary>
    /// Resets the question to the default state.
    /// </summary>
    private void Reset()
    {
        this._isSubmitted = false;
        this._options.ForEach(option => option.Reset());
        this.SelectedOption = null;
        this.StateHasChanged();
    }

    /// <summary>
    /// Based on the question type, finds the correct answer(s) and resubmits the quiz.
    /// Note: This sets the number of attempts to -1 which represents the user clicked ShowAnswer.
    /// </summary>
    private void ShowAnswer()
    {
        this._options.ForEach(option => option.IsChecked = option.IsCorrect);
        this.SelectedOption = this._options.First(option => option.IsCorrect).Text;
        // We had to move this line above so that the submit method can know when the user clicked "show answer" and then award xp accordingly. 
        this._attempts = -1;
        this.Submit();
    }

    private void UpdateAndSave()
    {
        string[] options = this._options.Where(o => o.IsChecked).Select(o => o.Text).ToArray();
        MultipleChoiceQuestionData data = new MultipleChoiceQuestionData(options, this._isSubmitted, this._attempts);
        UserService.Service.SaveJsonData<MultipleChoiceQuestionData>(Path, data);
    }
}