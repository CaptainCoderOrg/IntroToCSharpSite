@inject NavigationManager NavigationManager
@implements IAdventureTask;

<MudCheckBox @bind-Checked="@IsChecked" >
    @if (IsChecked)
    {
        <del>@ChildContent</del>
    }
    else
    {
        @ChildContent
    }
</MudCheckBox>
<br/>
@code
{
    [CascadingParameter]
    public IAdventureActivity? Activity { get; set; }
    private bool _isChecked = false;
    private bool IsDisabled = true;
    private bool IsChecked
    {
        get => _isChecked;
        set
        {
            if (_isChecked == value) return;
            if (IsDisabled)
            {
                NotificationService.Service.Add("Log in to save your progress.", Severity.Warning).AndForget();
            }
            _isChecked = value;
            UpdateAndSaveTask();
        }
    }
    public bool IsComplete { get => IsChecked; }
    private string ParentName {
        get {
            if (Activity != null) return Activity.DBName;
            if (Parent != null) return Parent.Name;
            return "";
        }
    }

    private string Path {
        get {
            if (Activity == null) return $"{NavigationManager.GetRoute()}/tasks/{Utils.SanitizeDBName(ParentName)}/{Utils.SanitizeDBName(DBName)}";
            return $"{Activity.ActivityType}/{Activity.DBName}/{Utils.SanitizeDBName(DBName)}";
        }
    }

    [CascadingParameter, EditorRequired]
    public TaskList? Parent { get; set; } = null;
    [Parameter]
    public bool Optional { get; set; } = false;
    private string? _dbName = null;

    #pragma warning disable BL0007

    [Parameter]
    public string DBName { get => _dbName ?? Utils.SanitizeDBName(Name); set => _dbName = value;}
    #pragma warning restore BL0007

    [Parameter, EditorRequired]
    public string Name { get; set; } = String.Empty;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    protected override void OnInitialized()
    {
        UserService.Service.OnUserChange += HandleUserChange;
        if (Activity != null && !Optional) {
            Activity.AddTask(this);
        }
    }

    private void HandleUserChange(User userData)
    {
        IsDisabled = !userData.IsLoggedIn;
        if (userData.IsLoggedIn)
        {
            if(UserService.Service.TryGetTask(Path, out DataReference<bool> isChecked)){
                isChecked.DataChangedEvent += val =>
                {
                    _isChecked = val!;
                    StateHasChanged();
                };
            }
        }
        StateHasChanged();
    }

    private void UpdateAndSaveTask()
    {
        Activity?.Notify();
        UserService.Service.UpdateTaskItem(Path, _isChecked);
    }
}