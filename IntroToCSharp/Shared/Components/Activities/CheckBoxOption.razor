
@inject NavigationManager NavigationManager

    <MudPaper Class="pa-3 d-flex align-content-center" Style="@GetStyle()">

@if(IsMultiSelect) {
    <MudCheckBox Disabled="@IsSubmitted" Color="Color.Dark" @bind-Checked="@IsChecked" Label="@Text"></MudCheckBox>
} else {
    <MudRadio Disabled="@IsSubmitted" Option="@Text" Color="Color.Primary" UnCheckedColor="Color.Default">@Text</MudRadio>
}
</MudPaper>



@code {
    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public bool IsCorrect { get; set; }
    [Parameter]
    public bool IsChecked { get; set; } = false;
    [Parameter]
    public bool IsMultiSelect {get; set; } = false;
    public bool IsSubmitted { get; set; } = false;
    public bool IsSubmissionCorrect => (this.IsChecked && this.IsCorrect) || (!this.IsChecked && !this.IsCorrect);

    [CascadingParameter]
    public MultipleChoiceQuestion Parent { get; set; }

    public string ParentTitle => Parent == null ? "No-Parent" : Utils.SanitizeDBName(Parent.Question);
    private string Path => $"{NavigationManager.GetRoute()}/questions/{ParentTitle}/{Utils.SanitizeDBName(Text)}";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.Parent.AddOption(this);
        UserService.Service.OnUserChange += HandleUserChange;
    }

    private void HandleUserChange(User userData)
    {
        if (userData.IsLoggedIn)
        {
            if(UserService.Service.TryGetQuestionAnswer(Path, out DataReference<string> answer)){
                answer.DataChanged += val =>
                {
                    this.IsChecked = bool.Parse(val!);
                    StateHasChanged();
                };
            }
        }
        else
        {
            this.Reset();
        }
        StateHasChanged();
    }

    private string GetStyle()
    {
        if (!this.IsSubmitted || !this.IsChecked) return string.Empty;

        // Incorrect answers should highlight red
        if (this.IsCorrect) return $"background: {Themes.s_CSharpTheme.Palette.SuccessLighten.ToString()}; color: {Themes.s_CSharpTheme.Palette.Black.ToString()}";;
        // if (!this.IsCorrect) 
        return $"background: {Themes.s_CSharpTheme.Palette.ErrorLighten.ToString()}; color: {Themes.s_CSharpTheme.Palette.White.ToString()}";

    }

    public void Reset()
    {
        this.IsChecked = false;
        this.IsSubmitted = false;
    }

    public bool CheckAnswer()
    {
        this.IsSubmitted = true;
        return IsSubmissionCorrect;
    }

    public void UpdateAndSave()
    {
        UserService.Service.UpdateQuestionAnswer(Path, this.IsChecked.ToString());
    }
}
