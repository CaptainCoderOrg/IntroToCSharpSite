<Explore Title="Parsing Bad Input">
        <Text>
            What happens if you try to parse an <b>int</b> from a <b>string</b>
            that does not contain an <b>int value</b>? Study the code below
            but do not run it yet.
        </Text>
        <CodeBlock>int x = int.Parse("Hello World!");</CodeBlock>
        <Question Text="What do you think the program will do?"/>
        <TaskItem Name="Try Parse Bad Int">Add the code above to a C# Program</TaskItem>
        <TaskItem Name="Run Bad Parse Int">Try to run the program</TaskItem>
        <Question Text="@("What happens when the computer executes int.Parse(\"Hello World\")?")"/>
        <Explanation>
            <Text>
               When you write the code above, the compiler does not know that
               the <b>string</b> <Code>"Hello World"</Code> cannot be parsed as
               an <b>int</b>. When the computer attempts to <b>evaluate</b> the
               <b>expression</b> <Code>int.Parse("Hello World!")</Code> it
               fails. This causes a <b>run time error</b> to occur. That is, the
               program <b>crashes</b> and an error message is displayed in the
               terminal.
            </Text>
            <Note>
                Later, you will learn how to handle bad inputs using the
                <Code>TryParse</Code> <b>method</b>. For now, you can
                assume that all inputs to your programs will be valid.
            </Note>
        </Explanation>
    </Explore>