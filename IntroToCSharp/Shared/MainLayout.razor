@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject ISnackbar Snackbar

@* MudBlazor Dependencies *@
<MudThemeProvider @ref="_mudThemeProvider" Theme="Themes.s_CSharpTheme" @bind-IsDarkMode="@IsDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<TopMenu Main="this" />

<MudDrawerContainer Class="mt-13">
    <NavMenu Main="this" />

    <div class="pa-4">
        @Body
    </div>

</MudDrawerContainer>
@code
{
    public event Action<IJSRuntime, ISnackbar>? OnInit;
    private MudThemeProvider _mudThemeProvider = null!;
    private bool _isDarkMode = true;
    public bool IsDarkMode {
      get => _isDarkMode;
      set
      {
          if (value == _isDarkMode) return;
          _isDarkMode = value;
          StateHasChanged();
      }
    }
    public bool IsNavMenuOpen = true;
    public User UserData = new User("null");

    public async Task Login() => await JS.InvokeVoidAsync("firebaseLogin");
    public async Task Logout() => await JS.InvokeVoidAsync("firebaseLogout");

    protected override void OnInitialized()
    {
        
        UserService.Init(JS);
        UserService.Service.OnLogin += UpdateUser;
        UserService.Service.OnLogout += () => UpdateUser(new User("null"));
        DatabaseService.Init(JS);
        NotificationService.Init(Snackbar);
    }

    
    public void UpdateUser(User user)
    {
        UserData = user;
        InvokeAsync(StateHasChanged);

        if (UserData.UID != null)
        {
            DataReference<string> someVal = new DataReference<string>($"/users/{UserData.UID}/test");
            someVal.DataChanged += (data) => NotificationService.Service.Add(data).AndForget();
            someVal.Set("Some Value");

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsDarkMode = await _mudThemeProvider.GetSystemPreference();
        }
    }
    public void ToggleNavMenu() => IsNavMenuOpen = !IsNavMenuOpen;
}    