@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject ISnackbar Snackbar

@* MudBlazor Dependencies *@
<MudThemeProvider @ref="_mudThemeProvider" Theme="Themes.s_CSharpTheme" @bind-IsDarkMode="@IsDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<TopMenu Main="this" />

<MudDrawerContainer Class="mt-13">
    <NavMenu Main="this" />

    <div class="pa-4">
        @Body
    </div>

</MudDrawerContainer>
@code
{
    private MudThemeProvider _mudThemeProvider = null!;
    private bool _isDarkMode = true;
    public bool IsDarkMode {
      get => _isDarkMode;
      set
      {
          if (value == _isDarkMode) return;
          _isDarkMode = value;
          StateHasChanged();
      }
    }
    public bool IsNavMenuOpen = true;
    public User UserData = new User("null");

    public async Task Login() => await JS.InvokeVoidAsync("firebaseLogin");
    public async Task Logout() => await JS.InvokeVoidAsync("firebaseLogout");

    protected override async Task OnInitializedAsync()
    {
        // On initialization, register this object to be notified when the user changes
        await JS.InvokeVoidAsync("onAuthStateChanged", DotNetObjectReference.Create(this));
        DatabaseService.InitDatabase(JS);
        NotificationService.InitSnackbar(Snackbar);
    }

    [JSInvokable]
    /// Callback when the user changes. The response is a JSON object or "null" if the user is
    /// not authenticated.
    public void UpdateUser(string response)
    {
        UserData = new User(response);
        InvokeAsync(StateHasChanged);

        if (UserData.UID != null)
        {
            SetDataCall<string> setter = new SetDataCall<string>($"/users/{UserData.UID}/test");
            setter.Set("Some Value");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsDarkMode = await _mudThemeProvider.GetSystemPreference();
        }
    }
    public void ToggleNavMenu() => IsNavMenuOpen = !IsNavMenuOpen;
}